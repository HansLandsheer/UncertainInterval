
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "UncertainInterval"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('UncertainInterval')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("RPV")
> ### * RPV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RPV
> ### Title: Trichotomization of ordinal test results using predictive values
> ### Aliases: RPV
> 
> ### ** Examples
> 
> set.seed(1)
> # example of a validation sample
> ref=c(rep(0,1000), rep(1, 1000))
> test=round(c(rnorm(1000, 5, 1), rnorm(1000, 8, 2)))
> # calculated roll.length is invalid. Set to 3. Post test probability equals
> # Positive Predictive Values. Parameter pretest.prob is set to sample prevalence.
> RPV(ref, test, reliability = .9, roll.length = 3)
$parameters
     pretest.prob sample.prevalence       reliability               SEM 
            0.500             0.500             0.900             0.702 
      roll.length    rel.conf.level     decision.odds             limit 
            3.000             0.845             2.000             0.667 

$messages
     [,1]                                                              
[1,] "Reliable Predictive Values for scores  1 15  have been extended."
[2,] "Decision use = standardized.pv."                                 

$rel.pred.values
             1     2     3     4     5     6     7     8       9      10  11
rnpv     0.818 0.818 0.859 0.856 0.793 0.656 0.389 0.128   0.008   0.003   0
rppv     0.182 0.182 0.141 0.144 0.207 0.344 0.611 0.872   0.992   0.997   1
rsnpv    0.818 0.818 0.859 0.856 0.793 0.656 0.389 0.128   0.008   0.003   0
rsppv    0.182 0.182 0.141 0.144 0.207 0.344 0.611 0.872   0.992   0.997   1
rilr     0.222 0.222 0.164 0.168 0.261 0.524 1.573 6.829 119.750 347.000 Inf
rpt.odds 0.222 0.222 0.164 0.168 0.261 0.524 1.573 6.829 119.750 347.000 Inf
rpt.prob 0.182 0.182 0.141 0.144 0.207 0.344 0.611 0.872   0.992   0.997   1
          12  13  14  15
rnpv       0   0   0   0
rppv       1   1   1   1
rsnpv      0   0   0   0
rsppv      1   1   1   1
rilr     Inf Inf Inf Inf
rpt.odds Inf Inf Inf Inf
rpt.prob   1   1   1   1

$result
                  Negative Decisions Uncertain Positive Decisions
scores            1-5                6-7       8-15              
n                 803                606       591               
total.sample      40.2%              30.3%     29.5%             
correct.decisions 85.3%              NA%       99.3%             
true.neg.status   68.5%              31.1%     0.4%              
true.pos.status   11.8%              29.5%     58.7%             
realized.odds     5.805              0.949     146.75            

> # Set roll.length = 1 to ignore test reliability (value of parameter
> # reliability is ignored, but must be set to some value.)
> RPV(ref, test, reliability = 0, roll.length = 1)
$parameters
     pretest.prob sample.prevalence       reliability               SEM 
            0.500             0.500             0.000             2.221 
      roll.length    rel.conf.level     decision.odds             limit 
            1.000             0.000             2.000             0.667 

$messages
     [,1]                             
[1,] "No extension has been applied." 
[2,] "Decision use = standardized.pv."

$rel.pred.values
          1     2     3     4     5     6     7      8       9  10  11  12  13
npv       0 0.727 0.842 0.869 0.850 0.666 0.291  0.015   0.007   0   0   0   0
ppv       1 0.273 0.158 0.131 0.150 0.334 0.709  0.985   0.993   1   1   1   1
snpv      0 0.727 0.842 0.869 0.850 0.666 0.291  0.015   0.007   0   0   0   0
sppv      1 0.273 0.158 0.131 0.150 0.334 0.709  0.985   0.993   1   1   1   1
ilr     Inf 0.375 0.188 0.150 0.176 0.502 2.431 66.333 145.000 Inf Inf Inf Inf
pt.odds Inf 0.375 0.188 0.150 0.176 0.502 2.431 66.333 145.000 Inf Inf Inf Inf
pt.prob   1 0.273 0.158 0.131 0.150 0.334 0.709  0.985   0.993   1   1   1   1
         14  15
npv       0   0
ppv       1   1
snpv      0   0
sppv      1   1
ilr     Inf Inf
pt.odds Inf Inf
pt.prob   1   1

$result
                  Negative Decisions Uncertain Positive Decisions
scores            2-5                6-6       1-1 7-15          
n                 802                359       839               
total.sample      40.1%              17.9%     41.9%             
correct.decisions 85.4%              NA%       90.9%             
true.neg.status   68.5%              23.9%     7.6%              
true.pos.status   11.7%              12.0%     76.3%             
realized.odds     5.855              0.502     10.039            

> # When pretest.prob is set to .5, the Post-test Probabilities are equal to
> # the Standardized Positive Predictive Values.
> RPV(ref, test, pretest.prob = .5, reliability = .9, roll.length = 3)
$parameters
     pretest.prob sample.prevalence       reliability               SEM 
            0.500             0.500             0.900             0.702 
      roll.length    rel.conf.level     decision.odds             limit 
            3.000             0.845             2.000             0.667 

$messages
     [,1]                                                              
[1,] "Reliable Predictive Values for scores  1 15  have been extended."
[2,] "Decision use = standardized.pv."                                 

$rel.pred.values
             1     2     3     4     5     6     7     8       9      10  11
rnpv     0.818 0.818 0.859 0.856 0.793 0.656 0.389 0.128   0.008   0.003   0
rppv     0.182 0.182 0.141 0.144 0.207 0.344 0.611 0.872   0.992   0.997   1
rsnpv    0.818 0.818 0.859 0.856 0.793 0.656 0.389 0.128   0.008   0.003   0
rsppv    0.182 0.182 0.141 0.144 0.207 0.344 0.611 0.872   0.992   0.997   1
rilr     0.222 0.222 0.164 0.168 0.261 0.524 1.573 6.829 119.750 347.000 Inf
rpt.odds 0.222 0.222 0.164 0.168 0.261 0.524 1.573 6.829 119.750 347.000 Inf
rpt.prob 0.182 0.182 0.141 0.144 0.207 0.344 0.611 0.872   0.992   0.997   1
          12  13  14  15
rnpv       0   0   0   0
rppv       1   1   1   1
rsnpv      0   0   0   0
rsppv      1   1   1   1
rilr     Inf Inf Inf Inf
rpt.odds Inf Inf Inf Inf
rpt.prob   1   1   1   1

$result
                  Negative Decisions Uncertain Positive Decisions
scores            1-5                6-7       8-15              
n                 803                606       591               
total.sample      40.2%              30.3%     29.5%             
correct.decisions 85.3%              NA%       99.3%             
true.neg.status   68.5%              31.1%     0.4%              
true.pos.status   11.8%              29.5%     58.7%             
realized.odds     5.805              0.949     146.75            

> 
> 
> 
> 
> cleanEx()
> nameEx("TG.ROC")
> ### * TG.ROC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TG.ROC
> ### Title: Two-Graphs Receiving Operating Characteristics.
> ### Aliases: TG.ROC
> 
> ### ** Examples
> 
> ref = c(rep(0,100), rep(1,100))
> test = c(rnorm(100, 0, 1), rnorm(100, 1, 1))
> TG.ROC(ref, test, model='binormal', plot=TRUE)
[1] -0.2653795  1.2599762
> TG.ROC(ref, test, model='none', plot=TRUE)
         L          U 
-0.2313234  1.2199248 
> 
> 
> 
> cleanEx()
> nameEx("barplotMD")
> ### * barplotMD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: barplotMD
> ### Title: Barplot of frequencies, densities or both of the two
> ###   distributions of patients with and without the targeted condition.
> ### Aliases: barplotMD
> 
> ### ** Examples
> 
> data(tostbegg2)
> barplotMD(ref=tostbegg2$d, test=tostbegg2$y, name='Metastatic Rating', cex=1)
> x.axis = barplotMD(ref=tostbegg2$d, test=tostbegg2$y, plot='densities',
+ name='Metastatic Rating', cex=1)
> # Use x.axis to plot vertical line between test score 3 and 4
> segments(x0=(x.axis[2,4]+x.axis[1,3])/2, y0=0, y1=.4, col='red')
> # include zero score (in this sample empty)
> barplotMD(ref=tostbegg2$d, test=tostbegg2$y, fixed.range = c(0, 5),
+           plot='densities',name='Metastatic Rating', cex=1)
> op = par(mfrow=c(2,1))
> barplotMD(ref=tostbegg2$d, test=tostbegg2$y, plot='both',
+           name='Metastatic Rating', cex.legend=.6, pos='top')
> par(mfrow=op)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("check.data")
> ### * check.data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check.data
> ### Title: Function to check the dataset of individuals with (1) and
> ###   without (0) the targeted condition.
> ### Aliases: check.data
> 
> ### ** Examples
> 
> set.seed(1)
> ref=c(rep(0,500), rep(1,500))
> test=c(rnorm(500,0,1), rnorm(500,1,1.2))
> check.data(ref, test) # model = 'kernel'
     ref         test
1      0 -0.626453811
2      0  0.183643324
3      0 -0.835628612
4      0  1.595280802
5      0  0.329507772
6      0 -0.820468384
7      0  0.487429052
8      0  0.738324705
9      0  0.575781352
10     0 -0.305388387
11     0  1.511781168
12     0  0.389843236
13     0 -0.621240581
14     0 -2.214699887
15     0  1.124930918
16     0 -0.044933609
17     0 -0.016190263
18     0  0.943836211
19     0  0.821221195
20     0  0.593901321
21     0  0.918977372
22     0  0.782136301
23     0  0.074564983
24     0 -1.989351696
25     0  0.619825748
26     0 -0.056128740
27     0 -0.155795507
28     0 -1.470752384
29     0 -0.478150055
30     0  0.417941560
31     0  1.358679552
32     0 -0.102787727
33     0  0.387671612
34     0 -0.053805041
35     0 -1.377059557
36     0 -0.414994563
37     0 -0.394289954
38     0 -0.059313397
39     0  1.100025372
40     0  0.763175748
41     0 -0.164523596
42     0 -0.253361680
43     0  0.696963375
44     0  0.556663199
45     0 -0.688755695
46     0 -0.707495157
47     0  0.364581962
48     0  0.768532925
49     0 -0.112346212
50     0  0.881107726
51     0  0.398105880
52     0 -0.612026393
53     0  0.341119691
54     0 -1.129363096
55     0  1.433023702
56     0  1.980399899
57     0 -0.367221476
58     0 -1.044134626
59     0  0.569719627
60     0 -0.135054604
61     0  2.401617761
62     0 -0.039240003
63     0  0.689739362
64     0  0.028002159
65     0 -0.743273209
66     0  0.188792300
67     0 -1.804958629
68     0  1.465554862
69     0  0.153253338
70     0  2.172611670
71     0  0.475509529
72     0 -0.709946431
73     0  0.610726353
74     0 -0.934097632
75     0 -1.253633400
76     0  0.291446236
77     0 -0.443291873
78     0  0.001105352
79     0  0.074341324
80     0 -0.589520946
81     0 -0.568668733
82     0 -0.135178615
83     0  1.178086997
84     0 -1.523566800
85     0  0.593946188
86     0  0.332950371
87     0  1.063099837
88     0 -0.304183924
89     0  0.370018810
90     0  0.267098791
91     0 -0.542520031
92     0  1.207867806
93     0  1.160402616
94     0  0.700213650
95     0  1.586833455
96     0  0.558486426
97     0 -1.276592208
98     0 -0.573265414
99     0 -1.224612615
100    0 -0.473400636
101    0 -0.620366677
102    0  0.042115873
103    0 -0.910921649
104    0  0.158028772
105    0 -0.654584644
106    0  1.767287269
107    0  0.716707476
108    0  0.910174229
109    0  0.384185358
110    0  1.682176081
111    0 -0.635736454
112    0 -0.461644730
113    0  1.432282239
114    0 -0.650696353
115    0 -0.207380744
116    0 -0.392807929
117    0 -0.319992869
118    0 -0.279113303
119    0  0.494188331
120    0 -0.177330482
121    0 -0.505957462
122    0  1.343038825
123    0 -0.214579409
124    0 -0.179556530
125    0 -0.100190741
126    0  0.712666307
127    0 -0.073564404
128    0 -0.037634171
129    0 -0.681660479
130    0 -0.324270272
131    0  0.060160440
132    0 -0.588894486
133    0  0.531496193
134    0 -1.518394082
135    0  0.306557861
136    0 -1.536449824
137    0 -0.300976127
138    0 -0.528279904
139    0 -0.652094781
140    0 -0.056896778
141    0 -1.914359426
142    0  1.176583312
143    0 -1.664972436
144    0 -0.463530401
145    0 -1.115920105
146    0 -0.750819001
147    0  2.087166546
148    0  0.017395620
149    0 -1.286300530
150    0 -1.640605534
151    0  0.450187101
152    0 -0.018559833
153    0 -0.318068375
154    0 -0.929362147
155    0 -1.487460310
156    0 -1.075192297
157    0  1.000028804
158    0 -0.621266695
159    0 -1.384426847
160    0  1.869290622
161    0  0.425100377
162    0 -0.238647101
163    0  1.058483049
164    0  0.886422651
165    0 -0.619243048
166    0  2.206102465
167    0 -0.255027030
168    0 -1.424494650
169    0 -0.144399602
170    0  0.207538339
171    0  2.307978399
172    0  0.105802368
173    0  0.456998805
174    0 -0.077152935
175    0 -0.334000842
176    0 -0.034726028
177    0  0.787639606
178    0  2.075245009
179    0  1.027392439
180    0  1.207908398
181    0 -1.231323422
182    0  0.983895570
183    0  0.219924804
184    0 -1.467250029
185    0  0.521022743
186    0 -0.158754605
187    0  1.464587312
188    0 -0.766082000
189    0 -0.430211754
190    0 -0.926109497
191    0 -0.177103961
192    0  0.402011779
193    0 -0.731748173
194    0  0.830373168
195    0 -1.208082786
196    0 -1.047984413
197    0  1.441157707
198    0 -1.015847465
199    0  0.411974712
200    0 -0.381076051
201    0  0.409401840
202    0  1.688873286
203    0  1.586588433
204    0 -0.330907801
205    0 -2.285235535
206    0  2.497661590
207    0  0.667066167
208    0  0.541327336
209    0 -0.013399523
210    0  0.510108423
211    0 -0.164375832
212    0  0.420694643
213    0 -0.400246744
214    0 -1.370207878
215    0  0.987838267
216    0  1.519745025
217    0 -0.308740569
218    0 -1.253289756
219    0  0.642241306
220    0 -0.044709137
221    0 -1.733218407
222    0  0.002131860
223    0 -0.630300334
224    0 -0.340968580
225    0 -1.156572363
226    0  1.803141908
227    0 -0.331132036
228    0 -1.605513412
229    0  0.197193439
230    0  0.263175646
231    0 -0.985826700
232    0 -2.888920672
233    0 -0.640481703
234    0  0.570507636
235    0 -0.059723276
236    0 -0.098178744
237    0  0.560820729
238    0 -1.186458639
239    0  1.096777044
240    0 -0.005344028
241    0  0.707310667
242    0  1.034107735
243    0  0.223480415
244    0 -0.878707613
245    0  1.162964556
246    0 -2.000164945
247    0 -0.544790740
248    0 -0.255670709
249    0 -0.166121037
250    0  1.020463909
251    0  0.136221893
252    0  0.407167603
253    0 -0.069654813
254    0 -0.247664342
255    0  0.695550807
256    0  1.146228357
257    0 -2.403096215
258    0  0.572739555
259    0  0.374724407
260    0 -0.425267722
261    0  0.951012808
262    0 -0.389237182
263    0 -0.284330662
264    0  0.857409778
265    0  1.719627299
266    0  0.270054901
267    0 -0.422184010
268    0 -1.189113295
269    0 -0.331032979
270    0 -0.939829327
271    0 -0.258932583
272    0  0.394379168
273    0 -0.851857092
274    0  2.649166881
275    0  0.156011676
276    0  1.130207267
277    0 -2.289123980
278    0  0.741001157
279    0 -1.316245160
280    0  0.919803678
281    0  0.398130155
282    0 -0.407528579
283    0  1.324258630
284    0 -0.701231669
285    0 -0.580614304
286    0 -1.001072181
287    0 -0.668178607
288    0  0.945184953
289    0  0.433702150
290    0  1.005159218
291    0 -0.390118664
292    0  0.376370292
293    0  0.244164924
294    0 -1.426257342
295    0  1.778429287
296    0  0.134447661
297    0  0.765598999
298    0  0.955136677
299    0 -0.050565701
300    0 -0.305815420
301    0  0.893673702
302    0 -1.047298149
303    0  1.971337386
304    0 -0.383632106
305    0  1.654145302
306    0  1.512212694
307    0  0.082965734
308    0  0.567220915
309    0 -1.024548480
310    0  0.323006503
311    0  1.043612458
312    0  0.099078487
313    0 -0.454136909
314    0 -0.655781852
315    0 -0.035922423
316    0  1.069161461
317    0 -0.483974930
318    0 -0.121010111
319    0 -1.294140004
320    0  0.494312836
321    0  1.307901520
322    0  1.497041009
323    0  0.814702731
324    0 -1.869788790
325    0  0.482029504
326    0  0.456135603
327    0 -0.353400286
328    0  0.170489471
329    0 -0.864035954
330    0  0.679230774
331    0 -0.327101015
332    0 -1.569082185
333    0 -0.367450756
334    0  1.364434929
335    0 -0.334281365
336    0  0.732750042
337    0  0.946585640
338    0  0.004398704
339    0 -0.352322306
340    0 -0.529695509
341    0  0.739589226
342    0 -1.063457415
343    0  0.246210844
344    0 -0.289499367
345    0 -2.264889356
346    0 -1.408850456
347    0  0.916019329
348    0 -0.191278951
349    0  0.803283216
350    0  1.887474463
351    0  1.473881181
352    0  0.677268492
353    0  0.379962687
354    0 -0.192798426
355    0  1.577891795
356    0  0.596234109
357    0 -1.173576941
358    0 -0.155642535
359    0 -1.918909820
360    0 -0.195258846
361    0 -2.592327670
362    0  1.314002167
363    0 -0.635543001
364    0 -0.429978839
365    0 -0.169318332
366    0  0.612218174
367    0  0.678340177
368    0  0.567951972
369    0 -0.572542604
370    0 -1.363291256
371    0 -0.388722244
372    0  0.277914132
373    0 -0.823081122
374    0 -0.068840934
375    0 -1.167662326
376    0 -0.008309014
377    0  0.128855402
378    0 -0.145875628
379    0 -0.163910957
380    0  1.763552003
381    0  0.762586512
382    0  1.111431081
383    0 -0.923206953
384    0  0.164341838
385    0  1.154825187
386    0 -0.056521425
387    0 -2.129360648
388    0  0.344845762
389    0 -1.904955446
390    0 -0.811170153
391    0  1.324004321
392    0  0.615636849
393    0  1.091668956
394    0  0.306604862
395    0 -0.110158762
396    0 -0.924312773
397    0  1.592913754
398    0  0.045010598
399    0 -0.715128401
400    0  0.865223100
401    0  1.074440958
402    0  1.895654774
403    0 -0.602997304
404    0 -0.390867821
405    0 -0.416222032
406    0 -0.375657423
407    0 -0.366630946
408    0 -0.295677453
409    0  1.441820410
410    0 -0.697538292
411    0 -0.388167506
412    0  0.652536452
413    0  1.124772447
414    0 -0.772110803
415    0 -0.508086216
416    0  0.523620590
417    0  1.017754227
418    0 -0.251164588
419    0 -1.429993447
420    0  1.709121032
421    0  1.435069572
422    0 -0.710371146
423    0 -0.065067574
424    0 -1.759468735
425    0  0.569722972
426    0  1.612346798
427    0 -1.637280647
428    0 -0.779568513
429    0 -0.641176934
430    0 -0.681131394
431    0 -2.033285596
432    0  0.500963559
433    0 -1.531798140
434    0 -0.024997639
435    0  0.592984721
436    0 -0.198195421
437    0  0.892008392
438    0 -0.025715071
439    0 -0.647660451
440    0  0.646359415
441    0 -0.433832740
442    0  1.772611185
443    0 -0.018259711
444    0  0.852814994
445    0  0.205162903
446    0 -3.008048599
447    0 -1.366111931
448    0 -0.424102260
449    0  0.236803664
450    0 -2.342723120
451    0  0.961696633
452    0 -0.604425734
453    0 -0.752877279
454    0 -1.555611593
455    0 -1.453893738
456    0  0.056331836
457    0  0.509369407
458    0 -2.097882960
459    0 -1.004361979
460    0  0.535771722
461    0 -0.453037085
462    0  2.165368502
463    0  1.245746673
464    0  0.595498034
465    0  0.004884450
466    0  0.279360782
467    0 -0.705906125
468    0  0.628017153
469    0  1.480213960
470    0  1.083429910
471    0 -0.813244257
472    0 -1.618876849
473    0 -0.109655699
474    0  0.440889371
475    0  1.350993980
476    0 -1.318609485
477    0  0.364384593
478    0  0.233499835
479    0  1.193955261
480    0 -0.027909972
481    0 -0.357298855
482    0 -1.146814136
483    0 -0.517420484
484    0 -0.362123773
485    0  2.350554326
486    0  2.446531376
487    0 -0.166703279
488    0 -1.043667439
489    0 -1.972934934
490    0  0.514671633
491    0 -1.090573584
492    0  2.284659326
493    0 -0.885617573
494    0  0.111106430
495    0  3.810276681
496    0 -1.108909998
497    0  0.307566624
498    0 -1.106894472
499    0  0.347653649
500    0 -0.873264535
501    1  1.092763747
502    1  0.643757629
503    1 -0.419890689
504    1  1.013551226
505    1  2.189921243
506    1  2.912760945
507    1 -0.647253525
508    1  0.700466880
509    1  2.391309432
510    1 -0.337066817
511    1 -2.034200827
512    1 -0.123083070
513    1 -0.160687350
514    1  1.056986311
515    1  0.515515848
516    1  1.277795354
517    1  0.493153110
518    1  1.448942074
519    1  0.560793070
520    1  2.428121736
521    1  0.115206970
522    1  1.348799975
523    1 -0.061819482
524    1  1.249607775
525    1  0.942723793
526    1 -1.021424775
527    1  0.826928132
528    1  2.416256399
529    1  1.817679908
530    1  1.171897157
531    1 -0.430779732
532    1  2.403074383
533    1  1.095042051
534    1  0.457871497
535    1  2.970433855
536    1  0.076489214
537    1  1.364033153
538    1  2.538084905
539    1  1.722667354
540    1  0.631573283
541    1  0.497898276
542    1  1.426162636
543    1  1.616177338
544    1  1.022328880
545    1  2.582138767
546    1  0.921001600
547    1  0.159644706
548    1  1.644791358
549    1 -1.642138787
550    1  1.470368493
551    1  1.596353143
552    1  0.730150341
553    1 -0.340571798
554    1  0.526006476
555    1  2.859796411
556    1  0.107782624
557    1 -1.798054541
558    1  1.974694531
559    1  0.398427211
560    1  0.386936121
561    1 -0.458436849
562    1  0.972929646
563    1  1.841487161
564    1  0.295021569
565    1  0.271926470
566    1  2.315968258
567    1  0.702988388
568    1  0.808117944
569    1  0.249066099
570    1  2.080521563
571    1 -0.193032355
572    1  2.019100463
573    1  1.966842747
574    1  0.438878877
575    1  2.018104376
576    1  2.184123836
577    1  1.690744346
578    1  3.429810455
579    1 -1.354823829
580    1 -0.397905117
581    1 -0.651823056
582    1  1.201215921
583    1  2.901554895
584    1  3.013466744
585    1  1.585956038
586    1  2.054407915
587    1  0.826150151
588    1  1.562766112
589    1  1.451482573
590    1  0.086751670
591    1  0.648046079
592    1  0.838190483
593    1  2.672614979
594    1 -0.244386428
595    1 -1.537202177
596    1  1.921933862
597    1  0.020607255
598    1  0.476671692
599    1  2.085646038
600    1  0.084296483
601    1  0.590719624
602    1  2.802909441
603    1  1.633969255
604    1  1.650629627
605    1  0.835991973
606    1 -0.364080624
607    1 -0.795952585
608    1  0.731937228
609    1  3.402063073
610    1  1.266044579
611    1  1.197247491
612    1  1.399148331
613    1  0.537750401
614    1 -0.678504832
615    1  4.210888955
616    1  0.491576694
617    1  0.641678186
618    1 -1.150810072
619    1  0.702390130
620    1  0.703235298
621    1  0.693387546
622    1 -1.144325720
623    1  3.141595379
624    1  3.116303617
625    1  1.827520266
626    1 -0.320888773
627    1  1.857411228
628    1  0.704235620
629    1  0.616256601
630    1  2.635173152
631    1 -0.473459108
632    1  0.386536921
633    1  0.122566001
634    1  1.023702408
635    1 -0.887436698
636    1  0.156000076
637    1  1.859118507
638    1  1.558257888
639    1 -0.168682768
640    1  1.671061277
641    1 -1.919167694
642    1  0.591418088
643    1  1.855639834
644    1  0.209155136
645    1  0.956316853
646    1 -0.911943562
647    1  2.017351357
648    1 -1.220466618
649    1  0.611619242
650    1  0.693702265
651    1  1.073105473
652    1  0.011810045
653    1  3.195676582
654    1 -0.715899459
655    1  1.304964572
656    1 -2.527728434
657    1  1.002898971
658    1  1.611598686
659    1 -0.301664001
660    1  1.845799572
661    1  1.397171620
662    1  2.171592968
663    1 -0.012007856
664    1 -0.164695886
665    1 -1.125837618
666    1  0.613035590
667    1 -0.606560891
668    1  1.825787234
669    1  1.085536783
670    1  3.627702831
671    1 -0.389249119
672    1  2.418025677
673    1  0.367157966
674    1 -0.747953614
675    1  1.687560845
676    1 -0.720053246
677    1 -0.266222022
678    1  0.120265747
679    1  1.253088717
680    1 -0.198704872
681    1  2.293420388
682    1 -0.438769259
683    1  1.259964442
684    1  1.171704436
685    1 -0.278900109
686    1  0.485651907
687    1  0.212584628
688    1  2.151273192
689    1  2.867263163
690    1 -0.248955721
691    1  2.116686890
692    1  0.909464883
693    1 -1.360634419
694    1  0.092915629
695    1  1.553378993
696    1  1.174127957
697    1 -1.930773585
698    1  1.696382423
699    1  1.786062398
700    1  0.634589395
701    1  0.150918121
702    1  3.365886417
703    1  0.892001583
704    1  0.983179298
705    1 -0.348148325
706    1 -0.612956148
707    1 -0.827786925
708    1  0.493638148
709    1  2.633109357
710    1  3.104553814
711    1  2.882037681
712    1  2.556106684
713    1  0.714884498
714    1 -0.468980163
715    1  0.606624784
716    1 -1.894940332
717    1  0.623448552
718    1  2.991854446
719    1  1.157143721
720    1  2.315066419
721    1  1.587209148
722    1  0.065307645
723    1  3.092271224
724    1  0.905935258
725    1 -0.170664551
726    1  1.084791790
727    1 -0.822319435
728    1  2.036534839
729    1  1.601882062
730    1  0.574262404
731    1  0.413885335
732    1  2.123552737
733    1 -0.274890064
734    1 -0.180585046
735    1  1.509097452
736    1  0.458423823
737    1  2.110101756
738    1  0.761655028
739    1  2.433821220
740    1  1.594653646
741    1 -1.694183089
742    1 -0.602445633
743    1  2.539330247
744    1  1.828955085
745    1 -0.160475201
746    1 -0.614952422
747    1  2.240398467
748    1  0.025868248
749    1  3.162070574
750    1  3.125850352
751    1 -0.745629644
752    1 -0.014785175
753    1 -0.500575591
754    1  1.800745681
755    1 -0.548923625
756    1 -1.442004246
757    1  3.425616393
758    1  2.207168185
759    1  1.980548321
760    1  0.203214060
761    1  0.986462522
762    1  1.743612707
763    1 -0.537486490
764    1  0.850886408
765    1  1.210889985
766    1  3.031328553
767    1  1.770559261
768    1  2.538679639
769    1  1.168656368
770    1 -0.335003220
771    1  0.592387634
772    1 -0.997717567
773    1  2.114622114
774    1  2.700192202
775    1  0.924735067
776    1 -0.177082803
777    1  2.304580301
778    1  1.167192432
779    1  0.536473483
780    1  2.348302508
781    1  0.088185211
782    1  2.378750924
783    1 -0.010971511
784    1  1.469696008
785    1  2.069652691
786    1 -0.602310455
787    1  1.477748173
788    1  0.866095836
789    1  1.810892700
790    1  0.053682478
791    1  0.895616399
792    1  2.658740809
793    1  1.202188197
794    1  1.987829138
795    1  0.734926483
796    1 -0.235269986
797    1  0.986889171
798    1 -0.469989387
799    1 -2.115333666
800    1  2.402947110
801    1 -0.304290580
802    1 -1.191299615
803    1  2.194338169
804    1  0.985765862
805    1  0.280445926
806    1  0.786462416
807    1  0.488822390
808    1  2.195990532
809    1  1.873192850
810    1 -1.071956715
811    1  1.424078195
812    1  1.872176399
813    1  1.801913171
814    1 -1.909180771
815    1  0.717571090
816    1  3.375559985
817    1  1.956153446
818    1 -1.051131417
819    1 -0.996402454
820    1  1.589331463
821    1  0.791133417
822    1  2.153548677
823    1  1.352591994
824    1  1.097199236
825    1  1.220394211
826    1  1.199506042
827    1 -0.523518879
828    1  3.819391985
829    1 -0.694406489
830    1  0.979646209
831    1  0.346816777
832    1  3.160134800
833    1  2.213728211
834    1  0.323540133
835    1  1.246504954
836    1  2.398554340
837    1  3.683587407
838    1  1.362718091
839    1 -0.251007923
840    1 -0.180250776
841    1  3.406862297
842    1 -1.484685781
843    1  4.666890843
844    1  0.686379287
845    1  0.454728089
846    1  1.189072667
847    1  2.120066473
848    1  1.363393931
849    1 -1.347380267
850    1  1.424244051
851    1  1.540509416
852    1  1.791461045
853    1 -0.237704873
854    1 -1.845227458
855    1  0.610508431
856    1 -0.133158501
857    1  0.080932002
858    1 -0.144535120
859    1  0.522394660
860    1  0.626539524
861    1  1.955311256
862    1  2.183714013
863    1  0.046562005
864    1  0.629418434
865    1  1.433733719
866    1  2.678549326
867    1  0.932715496
868    1 -1.038648190
869    1  1.278223054
870    1  0.857091195
871    1  3.126991424
872    1  1.412106599
873    1  0.252340261
874    1  0.472573247
875    1  0.393643853
876    1  1.223242165
877    1  1.211701357
878    1  2.099017848
879    1  1.384212071
880    1  0.559975243
881    1 -0.128733554
882    1  1.761643518
883    1  0.925013821
884    1  1.219405441
885    1  2.324369222
886    1  3.102442742
887    1 -0.144579752
888    1  2.972896548
889    1 -0.040080235
890    1  1.319622631
891    1  1.266844594
892    1  0.667709788
893    1  2.673103649
894    1  0.209305600
895    1  1.792637537
896    1  0.984093160
897    1 -0.117776358
898    1  2.457626972
899    1 -1.506008439
900    1  0.368617037
901    1 -0.849683080
902    1  1.233185284
903    1  1.317307059
904    1 -0.342482202
905    1  1.781143547
906    1 -0.239480286
907    1  1.791041799
908    1  1.285395280
909    1  1.858331137
910    1 -0.126179647
911    1  1.114424812
912    1  0.444616696
913    1 -0.762658587
914    1  1.183223807
915    1  3.128515134
916    1  0.222314880
917    1  0.760219029
918    1  1.827092480
919    1  1.043374612
920    1  3.332243575
921    1  1.884656481
922    1  3.785600720
923    1  1.418691216
924    1 -0.360699994
925    1  1.505602321
926    1 -0.109467508
927    1 -0.208474839
928    1  0.772630804
929    1  2.120700040
930    1  1.412691999
931    1  1.976824332
932    1  2.098409203
933    1  0.793777443
934    1 -1.882677336
935    1  1.955088222
936    1  3.602939043
937    1  1.070060199
938    1 -0.625897339
939    1  0.558939081
940    1 -0.121421095
941    1  0.950032936
942    1  1.811334407
943    1  2.039723376
944    1  1.282210030
945    1 -0.120764160
946    1  1.975902601
947    1  2.617982266
948    1  3.702259331
949    1  0.407617079
950    1  1.568911119
951    1  2.432429999
952    1  0.860325434
953    1  1.629830267
954    1  1.257305778
955    1  0.838660559
956    1  1.202210923
957    1  2.157679323
958    1  1.490534697
959    1  0.440274142
960    1 -1.687739571
961    1  0.045924178
962    1  0.976053859
963    1 -2.017310146
964    1  3.653142438
965    1 -0.786514676
966    1 -0.392902251
967    1  2.749285870
968    1 -1.627851138
969    1  1.886875217
970    1  0.587189478
971    1  1.547052090
972    1  2.053732315
973    1 -0.150156707
974    1  0.152986185
975    1 -2.596339164
976    1 -0.153262789
977    1  1.456225905
978    1  1.606081107
979    1  3.432467205
980    1  1.077552434
981    1  1.556390378
982    1  1.089733999
983    1  0.415796517
984    1  1.898692985
985    1  1.557081497
986    1  1.155304550
987    1  0.021447218
988    1  0.951819458
989    1  1.937700373
990    1  1.811743297
991    1  0.420816969
992    1  0.197063838
993    1  1.615361586
994    1  2.258691915
995    1  1.145269796
996    1  0.624048538
997    1 -0.056804876
998    1  0.496855730
999    1 -0.779302014
1000   1  0.163218161
> 
> 
> 
> cleanEx()
> nameEx("get.intersection")
> ### * get.intersection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.intersection
> ### Title: get.intersection Obtain the intersection of two distributions
> ###   using the kernel method
> ### Aliases: get.intersection
> 
> ### ** Examples
> 
> ref=c(rep(0,500), rep(1,500))
> test=c(rnorm(500,0,1), rnorm(500,1,2))
> (get.intersection(ref, test)) # two intersections! Generates warning in other functions!
[1] -1.723612  1.268730
> 
> 
> 
> cleanEx()
> nameEx("greyzone")
> ### * greyzone
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: greyzone
> ### Title: Function for the determination of a grey zone for quantitative
> ###   diagnostic and screening tests
> ### Aliases: greyzone
> 
> ### ** Examples
> 
>  ref=c(rep(0, 250), rep(1, 250))
>  test = c(rep(1:5, c(90,75,50,35,0)), c(rep(1:5, c(10,25,50,65,100))))
>  table(ref, test)
   test
ref   1   2   3   4   5
  0  90  75  50  35   0
  1  10  25  50  65 100
>  greyzone(ref, test, ret=TRUE)
$table
  thresholds d0  d1 tot  TP  FP  TN  FN  tpr  fpr preodds   sp   se    neg.lr
1          1 90  10 100 250 250   0   0 1.00 1.00       1 0.00 1.00       NaN
2          2 75  25 100 240 160  90  10 0.96 0.64       1 0.36 0.96 0.1111111
3          3 50  50 100 215  85 165  35 0.86 0.34       1 0.66 0.86 0.2121212
4          4 35  65 100 165  35 215  85 0.66 0.14       1 0.86 0.66 0.3953488
5          5  0 100 100 100   0 250 150 0.40 0.00       1 1.00 0.40 0.6000000
    pos.lr negpostodds pospostodds negpostprob pospostprob
1 1.000000         NaN    1.000000         NaN   0.5000000
2 1.500000   0.1111111    1.500000   0.1000000   0.6000000
3 2.529412   0.2121212    2.529412   0.1750000   0.7166667
4 4.714286   0.3953488    4.714286   0.2833333   0.8250000
5      Inf   0.6000000         Inf   0.3750000         NaN

$thresholds
lt ut 
 2  4 

> 
> 
> 
> cleanEx()
> nameEx("nlopt.ui")
> ### * nlopt.ui
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlopt.ui
> ### Title: Function for the determination of the population thresholds an
> ###   uncertain and inconclusive interval for bi-normal distributed test
> ###   scores.
> ### Aliases: nlopt.ui
> 
> ### ** Examples
> 
> # A simple test model:
> nlopt.ui()
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 0.5

$results
exp.Sp.ui exp.Se.ui       mu0       sd0       mu1       sd1 
     0.55      0.55      0.00      1.00      1.00      1.00 

$solution
         L          U 
0.09307898 0.90692102 

> # Using another bi-normal distribution:
> nlopt.ui(mu0=0, sd0=1, mu1=1.6, sd1=2)
Warning in nlopt.ui(mu0 = 0, sd0 = 1, mu1 = 1.6, sd1 = 2) :
  More than one point of intersection. Highest used.
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 1.194721

$results
exp.Sp.ui exp.Se.ui       mu0       sd0       mu1       sd1 
     0.55      0.55      0.00      1.00      1.60      2.00 

$solution
        L         U 
0.9107211 1.5315593 

> 
> 
> 
> 
> cleanEx()
> nameEx("nlopt.ui.general")
> ### * nlopt.ui.general
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlopt.ui.general
> ### Title: Function for the determination of the population thresholds an
> ###   uncertain and inconclusive interval for test scores with a known
> ###   common distribution.
> ### Aliases: nlopt.ui.general
> 
> ### ** Examples
> 
> # A simple test model:
> nlopt.ui.general(Se = .55, Sp = .55,
+                  distribution = "norm",
+                  parameters.d0 = c(mean = 0, sd = 1),
+                  parameters.d1 = c(mean = 1, sd = 1),
+                  overlap.interval=c(-2,3))
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 0.5

$results
exp.Sp.ui exp.Se.ui      mean        sd      mean        sd 
     0.55      0.55      0.00      1.00      1.00      1.00 

$solution
         L          U 
0.09307899 0.90692101 

> # Standard procedure when using a continuous distribution:
> nlopt.ui.general(parameters.d0 = c(mean = 0, sd = 1),
+                  parameters.d1 = c(mean = 1.6, sd = 2))
Warning in nlopt.ui.general(parameters.d0 = c(mean = 0, sd = 1), parameters.d1 = c(mean = 1.6,  :
  More than one point of intersection. Point with highest density used.
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 1.194674

$results
exp.Sp.ui exp.Se.ui      mean        sd      mean        sd 
     0.55      0.55      0.00      1.00      1.60      2.00 

$solution
        L         U 
0.9106663 1.5315211 

> # Function to calculate the Area under the Receiving Operating Characteristics
> # Curve (AUC or C-statistic)
> emp.AUC <- function(norm, abnorm) {
+   o = outer(abnorm, norm, "-")
+   mean((o > 0) + .5 * (o == 0))
+ }
> 
> library(MASS)
> library(car)
Loading required package: carData
> # gamma distributed data
> set.seed(4)
> d0 = rgamma(100, shape=2, rate=.5)
> d1 = rgamma(100, shape=7.5, rate=1)
> # 1. obtain parameters
> parameters.d0=fitdistr(d0, 'gamma')$estimate
> parameters.d1=fitdistr(d1, 'gamma')$estimate
> # 2. test if supposed distributions (gamma) is fitting
> qqPlot(d0, distribution='gamma', shape=parameters.d0['shape'])
[1] 60 87
> qqPlot(d1, distribution='gamma', shape=parameters.d1['shape'])
[1] 18 86
> # 3. draw curves and determine overlap
> curve(dgamma(x, shape=parameters.d0['shape'], rate=parameters.d0['rate']), from=0, to=16)
> curve(dgamma(x, shape=parameters.d1['shape'], rate=parameters.d1['rate']), from=0, to=16, add=TRUE)
> overlap.interval=c(1, 15) # ignore intersection at 0; observe large overlap
> # 4. get empirical AUC
> emp.AUC(d0, d1)
[1] 0.8365
> # about .65 --> Poor
> # .90-1 = excellent (A)
> # .80-.90 = good (B)
> # .70-.80 = fair (C)
> # .60-.70 = poor (D)
> # .50-.60 = fail (F)
> # 5. Get uncertain interval
> (res=nlopt.ui.general (Se = .57,
+                        Sp = .57,
+                        distribution = 'gamma',
+                        parameters.d0 = parameters.d0,
+                        parameters.d1 = parameters.d1,
+                        overlap.interval,
+                        intersection = NULL,
+                        start = NULL,
+                        print.level = 0))
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 4.685836

$results
exp.Sp.ui exp.Se.ui     shape      rate     shape      rate 
0.5700000 0.5700000 1.7440366 0.4301285 7.2101142 0.9344398 

$solution
       L        U 
3.815044 5.511590 

> abline(v=c(res$intersection, res$solution))
> # 6. Assess improvement when diagnosing outside the uncertain interval
> sel.d0 = d0 < res$solution[1] |  d0 > res$solution[2]
> sel.d1 = d1 < res$solution[1] |  d1 > res$solution[2]
> (percentage.selected.d0 = sum(sel.d0) / length(d0))
[1] 0.89
> (percentage.selected.d1 = sum(sel.d1) / length(d1))
[1] 0.8
> emp.AUC(d0[sel.d0], d1[sel.d1])
[1] 0.863764
> # AUC for selected scores outside the uncertain interval
> emp.AUC(d0[!sel.d0], d1[!sel.d1])
[1] 0.5
> # AUC for deselected scores; worst are deselected
> # weibull distributed data
> set.seed(4)
> d0 = rweibull(100, shape=3, scale=50)
> d1 = rweibull(100, shape=3, scale=70)
> # 1. obtain parameters
> parameters.d0=fitdistr(d0, 'weibull')$estimate
> parameters.d1=fitdistr(d1, 'weibull')$estimate
> # 2. test if supposed distributions (gamma) is fitting
> qqPlot(d0, distribution='weibull', shape=parameters.d0['shape'])
[1] 40  2
> qqPlot(d1, distribution='weibull', shape=parameters.d1['shape'])
[1] 76 40
> # 3. draw curves and determine overlap
> curve(dweibull(x, shape=parameters.d0['shape'],
+       scale=parameters.d0['scale']), from=0, to=150)
> curve(dweibull(x, shape=parameters.d1['shape'],
+       scale=parameters.d1['scale']), from=0, to=150, add=TRUE)
> overlap.interval=c(1, 100) # ignore intersection at 0; observe overlap
> # 4. get empirical AUC
> emp.AUC(d0, d1)
[1] 0.7766
> # about .65 --> Poor
> # .90-1 = excellent (A)
> # .80-.90 = good (B)
> # .70-.80 = fair (C)
> # .60-.70 = poor (D)
> # .50-.60 = fail (F)
> # 5. Get uncertain interval
> (res=nlopt.ui.general (Se = .55,
+                        Sp = .55,
+                        distribution = 'weibull',
+                        parameters.d0 = parameters.d0,
+                        parameters.d1 = parameters.d1,
+                        overlap.interval,
+                        intersection = NULL,
+                        start = NULL,
+                        print.level = 0))
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 54.90588

$results
exp.Sp.ui exp.Se.ui     shape     scale     shape     scale 
 0.550000  0.550000  2.715663 47.312078  3.194434 70.809780 

$solution
       L        U 
48.18346 62.36431 

> abline(v=c(res$intersection, res$solution))
> # 6. Assess improvement when diagnosing outside the uncertain interval
> sel.d0 = d0 < res$solution[1] |  d0 > res$solution[2]
> sel.d1 = d1 < res$solution[1] |  d1 > res$solution[2]
> (percentage.selected.d0 = sum(sel.d0) / length(d0))
[1] 0.8
> (percentage.selected.d1 = sum(sel.d1) / length(d1))
[1] 0.82
> emp.AUC(d0[sel.d0], d1[sel.d1])
[1] 0.7989329
> # AUC for selected scores outside the uncertain interval
> emp.AUC(d0[!sel.d0], d1[!sel.d1])
[1] 0.5527778
> # AUC for deselected scores; these scores are almost indistinguishable
> 
> 
> 
> cleanEx()

detaching 'package:car', 'package:carData', 'package:MASS'

> nameEx("nomogram")
> ### * nomogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nomogram
> ### Title: Fagan's nomogram to show the relationships between the prior
> ###   probability, the likelihood ratios, sensitivity and specificity, and
> ###   the posterior probability.
> ### Aliases: nomogram
> 
> ### ** Examples
> 
> # Show calculated results (first 3 times about the same)
> (nomogram(prob.pre.test = .10, probs.post.test=c(pos=.70, neg=.001), plot=FALSE))
         pre     post.pos     post.neg    min.LRpos    max.LRneg        minSe 
 0.100000000  0.700000000  0.001000000 21.000000000  0.009009009  0.991416309 
       minSp 
 0.952789700 
> (nomogram(prob.pre.test = .10, SeSp=c(Se=0.991416309, Sp=0.952789700), plot=FALSE))
         pre     post.pos     post.neg    min.LRpos    max.LRneg        minSe 
 0.100000000  0.700000002  0.001000000 21.000000191  0.009009009  0.991416309 
       minSp 
 0.952789700 
> (nomogram(prob.pre.test = .10, LR=c(pos=21, neg=0.0090090091), plot=FALSE))
         pre     post.pos     post.neg    min.LRpos    max.LRneg        minSe 
 0.100000000  0.700000000  0.001000000 21.000000000  0.009009009  0.991416309 
       minSp 
 0.952789700 
> (nomogram(prob.pre.test = .10, SeSp=c(Se=0.99, Sp=0.95), plot=FALSE))
         pre     post.pos     post.neg    min.LRpos    max.LRneg        minSe 
 0.100000000  0.687500000  0.001168224 19.800000000  0.010526316  0.990000000 
       minSp 
 0.950000000 
> # plot only
> nomogram(prob.pre.test = .10, LR=c(pos=21, neg=0.0090090091))
> # plot and display precise results
> (nomogram(prob.pre.test = .10, probs.post.test=c(pos=.70, neg=.001)))
         pre     post.pos     post.neg    min.LRpos    max.LRneg        minSe 
 0.100000000  0.700000000  0.001000000 21.000000000  0.009009009  0.991416309 
       minSp 
 0.952789700 
> 
> # check the influence of different values of prevalence
> i=1
> out=matrix(0,nrow = 9, ncol= 7)
> for (prev in (seq(.1, .9, by=.1))) {
+   out[i,]=nomogram(prob.pre.test=prev, probs.post.test=c(.95, .05), plot=FALSE)
+   i=i+1
+ }
> colnames(out) = names(nomogram(prob.pre.test=prev, probs.post.test=c(.95, .05), plot=FALSE))
> out
      pre post.pos post.neg  min.LRpos   max.LRneg     minSe     minSp
 [1,] 0.1     0.95     0.05 171.000000 0.473684211 0.5277778 0.9969136
 [2,] 0.2     0.95     0.05  76.000000 0.210526316 0.7916667 0.9895833
 [3,] 0.3     0.95     0.05  44.333333 0.122807018 0.8796296 0.9801587
 [4,] 0.4     0.95     0.05  28.500000 0.078947368 0.9236111 0.9675926
 [5,] 0.5     0.95     0.05  19.000000 0.052631579 0.9500000 0.9500000
 [6,] 0.6     0.95     0.05  12.666667 0.035087719 0.9675926 0.9236111
 [7,] 0.7     0.95     0.05   8.142857 0.022556391 0.9801587 0.8796296
 [8,] 0.8     0.95     0.05   4.750000 0.013157895 0.9895833 0.7916667
 [9,] 0.9     0.95     0.05   2.111111 0.005847953 0.9969136 0.5277778
> 
> 
> 
> 
> cleanEx()
> nameEx("plotMD")
> ### * plotMD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotMD
> ### Title: Function to plot the mixed densities of distributions of
> ###   individuals with (1) and without (0) the targeted condition.
> ### Aliases: plotMD
> 
> ### ** Examples
> 
> # A test of intermediate quality
> set.seed(1)
> ref=c(rep(0,500), rep(1,500))
> test=c(rnorm(500,0,1), rnorm(500,1,1.2))
> plotMD(ref, test)
> ua = ui.nonpar(ref, test) # with warning message!
> # Add lines to indicate Uncertain Interval
> abline(v=ua[1:2])
> select=(test <= ua[2] & test >= ua[1])
> # plot the mixed densities for the Uncertain Interval
> plotMD(ref[select], test[select])
> plotMD(ref[select], test[select], colspace='gray')
> plotMD(ref[select], test[select], colspace='BW')
> 
> # An ordinal test
> norm     = rep(1:5, times=c(33,6,6,11,2))
> abnorm   = rep(1:5, times=c(3,2,2,11,33))
> testres  = c(abnorm,norm)
> truestat = c(rep(1,length(abnorm)), rep(0,length(norm)))
> plotMD(ref=truestat, test=testres, model='ordinal')
> 
> # ordinal test: weak test
> set.seed(2)
> nobs=1000
> Z0 <- rnorm(nobs, mean=0)
> b0=seq(-5, 5, length.out=31) # range sufficient to cover both z0 and z1
> f0=cut(Z0, breaks = b0, labels = c(1:30))
> x0=as.numeric(levels(f0))[f0]
> Z1 <- rnorm(nobs, mean=.5) # very weak test, not recommended for practical use
> f1=cut(Z1, breaks = b0, labels = c(1:30))
> x1=as.numeric(levels(f1))[f1]
> test=c(x0, x1)
> ref =c(rep(0, length(x0)), rep(1, length(x1)))
> (pr=prop.table(table(ref, test)))
   test
ref      5      7      8      9     10     11     12     13     14     15
  0 0.0000 0.0015 0.0025 0.0060 0.0120 0.0185 0.0335 0.0450 0.0575 0.0625
  1 0.0005 0.0000 0.0005 0.0020 0.0040 0.0070 0.0175 0.0275 0.0390 0.0500
   test
ref     16     17     18     19     20     21     22     23     24     25
  0 0.0665 0.0555 0.0475 0.0375 0.0225 0.0160 0.0110 0.0020 0.0020 0.0005
  1 0.0595 0.0695 0.0680 0.0525 0.0420 0.0300 0.0140 0.0090 0.0040 0.0020
   test
ref     26     28
  0 0.0000 0.0000
  1 0.0010 0.0005
> breaks=c(min(test)-.5, seq(min(test), max(test), by=1)+.5)
> plotMD(ref, test, model='ordinal')
> # when model = 'binormal' or 'kernel', default breaks do not work well for
> # ordinal data, and have to be set by hand
> plotMD(ref, test, breaks=c(min(test)-.5, seq(min(test), max(test), by=1)+.5),
+        model='binormal')
> plotMD(ref, test, breaks=c(min(test)-.5, seq(min(test), max(test), by=1)+.5),
+        model='kernel')
> 
> 
> 
> cleanEx()
> nameEx("quality.threshold")
> ### * quality.threshold
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quality.threshold
> ### Title: Function for the description of the qualities of one or two
> ###   decision thresholds or threshold.
> ### Aliases: quality.threshold
> 
> ### ** Examples
> 
> # A simple test
> ref=c(rep(0,500), rep(1,500))
> test=c(rnorm(500,0,1), rnorm(500,1,1))
> ua = ui.nonpar(ref, test)
> quality.threshold(ref, test, threshold=ua[1], threshold.upper=ua[2])
$table
                            ref
class                          0   1  Sum
  0 (test < threshold.lower) 266  98  364
  NA                         169 180  349
  1 (test > threshold.upper)  65 222  287
  Sum                        500 500 1000

$cut
threshold.lower threshold.upper 
     0.02800216      1.14054697 

$indices
                 prevalence correct.classification.rate 
                  0.4915515                   0.7496160 
  balance.correct.incorrect                 specificity 
                  2.9938650                   0.8036254 
                sensitivity   negative.predictive.value 
                  0.6937500                   0.7307692 
  positive.predictive.value                        SNPV 
                  0.7735192                   0.7240681 
                       SPPV        neg.likelihood.ratio 
                  0.7793852                   0.3810855 
       pos.likelihood.ratio                 concordance 
                  3.5327885                   0.7853852 

> 
> 
> 
> cleanEx()
> nameEx("quality.threshold.uncertain")
> ### * quality.threshold.uncertain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quality.threshold.uncertain
> ### Title: Function for the description of the qualities of the Uncertain
> ###   Interval.
> ### Aliases: quality.threshold.uncertain
> 
> ### ** Examples
> 
> # A simple test model
> ref=c(rep(0,500), rep(1,500))
> test=c(rnorm(500,0,1), rnorm(500,1,sd=1))
> ua = ui.nonpar(ref, test)
> quality.threshold.uncertain(ref, test, ua[1], ua[2])
$intersection
[1] 0.5807851

$table
                                             ref
UI.class                                        0   1 Sum
  0 (threshold.lower <= test < intersection)   93  81 174
  1 (intersection <= test <= threshold.upper)  76  99 175
  Sum                                         169 180 349

$cut
threshold.lower threshold.upper 
     0.02800216      1.14054697 

$X2
          n   n sum    X2 df     p
TN.FP    93  76 169 1.710  1 0.191
FN.TP    81  99 180 1.800  1 0.180
overall 174 175 349 3.118  1 0.077

$t.test
     mean.0      mean.1           t          df           p 
  0.5661555   0.6059725  -1.1980354 346.9993262   0.2317209 

$indices
                 prevalence correct.classification.rate 
                  0.5157593                   0.5501433 
  balance.correct.incorrect                 specificity 
                  1.2229299                   0.5502959 
                sensitivity   negative.predictive.value 
                  0.5500000                   0.5344828 
  positive.predictive.value                        SNPV 
                  0.5657143                   0.5501331 
                       SPPV        neg.likelihood.ratio 
                  0.5501628                   0.8177419 
       pos.likelihood.ratio        balance.with.without 
                  1.2230263                   1.0650888 
                concordance 
                  0.5402696 

> 
> 
> 
> cleanEx()
> nameEx("synthdata_NACC")
> ### * synthdata_NACC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: synthdata_NACC
> ### Title: synthdata NACC
> ### Aliases: synthdata_NACC
> ### Keywords: data
> 
> ### ** Examples
> 
> data(synthdata_NACC) # needs R version 3.5 or later
> head(synthdata_NACC) # Show head of the dataset
     ID center ref.1 MOCATOTS.1 vdate.1 ref.2 MOCATOTS.2 vdate.2
14 6411     AD     1          7   16981    NA         NA      NA
36 1079      H     1         21   17095    NA         NA      NA
51 4012      W     0         25   17323    NA         NA      NA
52  785      C    NA         28   17415    NA         NA      NA
70  887      Y    NA         NA      NA     1         22   16772
73 3292      P     1          2   16997    NA         NA      NA
> nrow(synthdata_NACC) # total number of observations
[1] 6670
> # select part of data for the first measurement
> # N.B. ref is not available when it is inconclusive
> m1 = synthdata_NACC[!is.na(synthdata_NACC$MOCATOTS.1)
+                    & !is.na(synthdata_NACC$ref.1), ]
> # preliminary check data for possible missing values
> addmargins(table(m1$ref.1, m1$MOCATOTS.1, useNA = 'always'))
      
          0    1    2    3    4    5    6    7    8    9   10   11   12   13
  0       0    0    0    0    0    0    0    0    0    0    0    0    0    0
  1       8   13   19   17   20   31   36   47   38   41   52   46   65   79
  <NA>    0    0    0    0    0    0    0    0    0    0    0    0    0    0
  Sum     8   13   19   17   20   31   36   47   38   41   52   46   65   79
      
         14   15   16   17   18   19   20   21   22   23   24   25   26   27
  0       0    4    8   13   16   15   41   49   67  139  208  248  308  414
  1      98   93   97  134  167  148  170  185  210  191  158  185  116   82
  <NA>    0    0    0    0    0    0    0    0    0    0    0    0    0    0
  Sum    98   97  105  147  183  163  211  234  277  330  366  433  424  496
      
         28   29   30 <NA>  Sum
  0     394  313  199    0 2436
  1      44   36    6    0 2632
  <NA>    0    0    0    0    0
  Sum   438  349  205    0 5068
> # Show the data
> barplotMD(m1$ref.1, m1$MOCATOTS.1)
> 
> # calculate the difference between the two measurements in days
> ddiff = (m1$vdate.2 - m1$vdate.1)
> # There is a wide variety !!!
> summary(ddiff)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   62.0   363.0   385.0   423.3   455.0  1063.0    3192 
> # Estimate the test-retest reliability
> library(psych)
> ICC(na.omit(cbind(m1$MOCATOTS.1, m1$MOCATOTS.2)))
Call: ICC(x = na.omit(cbind(m1$MOCATOTS.1, m1$MOCATOTS.2)))

Intraclass correlation coefficients 
                         type  ICC  F  df1  df2 p lower bound upper bound
Single_raters_absolute   ICC1 0.86 14 1875 1876 0        0.85        0.87
Single_random_raters     ICC2 0.86 14 1875 1875 0        0.85        0.88
Single_fixed_raters      ICC3 0.87 14 1875 1875 0        0.86        0.88
Average_raters_absolute ICC1k 0.93 14 1875 1876 0        0.92        0.93
Average_random_raters   ICC2k 0.93 14 1875 1875 0        0.92        0.94
Average_fixed_raters    ICC3k 0.93 14 1875 1875 0        0.92        0.94

 Number of subjects = 1876     Number of Judges =  2> # Reducing the variety of time between measurements:
> timesel = (ddiff >= 335) & (ddiff <= 395)
> ICC(na.omit(cbind(m1$MOCATOTS.1[timesel], m1$MOCATOTS.2[timesel])))
Call: ICC(x = na.omit(cbind(m1$MOCATOTS.1[timesel], m1$MOCATOTS.2[timesel])))

Intraclass correlation coefficients 
                         type  ICC  F df1 df2        p lower bound upper bound
Single_raters_absolute   ICC1 0.87 15 916 917 1.4e-287        0.86        0.88
Single_random_raters     ICC2 0.87 15 916 916 8.2e-292        0.86        0.89
Single_fixed_raters      ICC3 0.88 15 916 916 8.2e-292        0.86        0.89
Average_raters_absolute ICC1k 0.93 15 916 917 1.4e-287        0.92        0.94
Average_random_raters   ICC2k 0.93 15 916 916 8.2e-292        0.92        0.94
Average_fixed_raters    ICC3k 0.93 15 916 916 8.2e-292        0.93        0.94

 Number of subjects = 917     Number of Judges =  2> 
> # error when using default calculated value for roll.length
> # RPV(m1$ref.1, m1$MOCATOTS.1, reliability = .86)
> RPV(m1$ref.1, m1$MOCATOTS.1, reliability = .86, roll.length = 5)
$parameters
     pretest.prob sample.prevalence       reliability               SEM 
            0.519             0.519             0.860             2.310 
      roll.length    rel.conf.level     decision.odds             limit 
            5.000             0.613             2.000             0.667 

$messages
     [,1]                                                                   
[1,] "Reliable Predictive Values for scores  0 1 29 30  have been extended."
[2,] "Decision use = standardized.pv."                                      

$rel.pred.values
           0   1   2   3   4   5   6   7   8   9  10  11  12     13     14
rnpv       0   0   0   0   0   0   0   0   0   0   0   0   0  0.010  0.027
rppv       1   1   1   1   1   1   1   1   1   1   1   1   1  0.990  0.973
rsnpv      0   0   0   0   0   0   0   0   0   0   0   0   0  0.011  0.029
rsppv      1   1   1   1   1   1   1   1   1   1   1   1   1  0.989  0.971
rilr     Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf 88.157 33.319
rpt.odds Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf Inf 95.250 36.000
rpt.prob   1   1   1   1   1   1   1   1   1   1   1   1   1  0.990  0.973
             15     16     17    18    19    20    21    22    23    24    25
rnpv      0.048  0.065  0.081 0.115 0.143 0.176 0.256 0.355 0.434 0.530 0.643
rppv      0.952  0.935  0.919 0.885 0.857 0.824 0.744 0.645 0.566 0.470 0.357
rsnpv     0.051  0.070  0.086 0.123 0.153 0.188 0.271 0.373 0.453 0.549 0.660
rsppv     0.949  0.930  0.914 0.877 0.847 0.812 0.729 0.627 0.547 0.451 0.340
rilr     18.548 13.296 10.561 7.126 5.553 4.332 2.690 1.678 1.209 0.821 0.514
rpt.odds 20.040 14.366 11.411 7.699 6.000 4.681 2.907 1.813 1.307 0.887 0.556
rpt.prob  0.952  0.935  0.919 0.885 0.857 0.824 0.744 0.645 0.566 0.470 0.357
            26    27    28    29    30
rnpv     0.729 0.784 0.851 0.851 0.851
rppv     0.271 0.216 0.149 0.149 0.149
rsnpv    0.744 0.796 0.861 0.861 0.861
rsppv    0.256 0.204 0.139 0.139 0.139
rilr     0.344 0.256 0.161 0.161 0.161
rpt.odds 0.372 0.276 0.174 0.174 0.174
rpt.prob 0.271 0.216 0.149 0.149 0.149

$result
                  Negative Decisions Uncertain Positive Decisions
scores            26-30              22-25     0-21              
n                 1912               1406      1750              
total.sample      37.7%              27.7%     34.5%             
correct.decisions 85.1%              NA%       91.7%             
true.neg.status   66.8%              27.2%     6.0%              
true.pos.status   10.8%              28.3%     60.9%             
realized.odds     5.732              1.124     10.986            

> 
> 
> 
> 
> cleanEx()

detaching 'package:psych'

> nameEx("ui.binormal")
> ### * ui.binormal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ui.binormal
> ### Title: Function for the determination of the thresholds of an uncertain
> ###   interval for bi-normal distributed test scores that are considered as
> ###   inconclusive.
> ### Aliases: ui.binormal
> 
> ### ** Examples
> 
> # A simple test model
> ref=c(rep(0,500), rep(1,500))
> test=c(rnorm(500,0,1), rnorm(500,1,1))
> ui.binormal(ref, test)
Warning in nlopt.ui(Se = Se, Sp = Sp, mu0 = m0, sd0 = sd0, mu1 = m1, sd1 = sd1,  :
  More than one point of intersection. Highest used.
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 0.5284079

$results
 exp.Sp.ui  exp.Se.ui        mu0        sd0        mu1        sd1 
0.55000000 0.55000000 0.02264409 1.01192832 0.95405963 1.05730432 

$solution
         L          U 
0.06819543 1.00146523 

> 
> 
> 
> 
> cleanEx()
> nameEx("ui.nonpar")
> ### * ui.nonpar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ui.nonpar
> ### Title: Function for the determination of an inconclusive interval for
> ###   continuous test scores
> ### Aliases: ui.nonpar
> 
> ### ** Examples
> 
> # A simple test model
> set.seed(1)
> ref=c(rep(0,500), rep(1,500))
> test=c(rnorm(500,0,1), rnorm(500,1,1))
> ui.nonpar(ref, test, select='limited')
        cp.l         cp.h           FN           TP           TN           FP 
  0.00213186   1.16625504  87.00000000 106.00000000  97.00000000  80.00000000 
 sensitivity  specificity intersection 
  0.54922280   0.54802260   0.58078511 
> 
> ref = c(rep(0,20), rep(1,20))
> test= c(rnorm(20), rnorm(20, mean=1))
> ui.nonpar(ref, test)
        cp.l         cp.h           FN           TP           TN           FP 
 -0.30835351   0.67351041   3.00000000   4.00000000   3.00000000   2.00000000 
 sensitivity  specificity intersection 
  0.57142857   0.60000000   0.06942967 
> 
> 
> 
> 
> cleanEx()
> nameEx("ui.ordinal")
> ### * ui.ordinal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ui.ordinal
> ### Title: Function to explore possible uncertain intervals of ordinal test
> ###   results of individuals with (1) and without (0) the targeted
> ###   condition.
> ### Aliases: ui.ordinal
> 
> ### ** Examples
> 
> # A short test with 5 ordinal values
> test0     = rep(1:5, times=c(165,14,16,55, 10)) # test results norm group
> test1     = rep(1:5, times=c( 15,11,13,55,164)) # test results of patients
> ref = c(rep(0, length(test0)), rep(1, length(test1)))
> test = c(test0, test1)
> table(ref, test)
   test
ref   1   2   3   4   5
  0 165  14  16  55  10
  1  15  11  13  55 164
> plotMD(ref, test, model='ordinal') # visual inspection
> ui.ordinal(ref, test, select.max='All')
$Youden
max.Youden  threshold         sp         se        acc       loss          C 
 0.5988372  4.0000000  0.7500000  0.8488372  0.7992278  0.4011628  0.8887597 

$intersection
[1] 3

$candidates
  lowerbound upperbound     UI.Sp     UI.Se    UI.Acc  UI.ratio      UI.C UI.n
5          2          4 0.1647059 0.8607595 0.5000000 0.9366165 0.5250186  164
4          3          4 0.0000000 1.0000000 0.4892086 0.9651709 0.5170878  139
2          2          3 0.4666667 0.5416667 0.5000000 0.8062016 0.5041667   54
1          3          3 0.0000000 1.0000000 0.4482759 0.8187984 0.5000000   29
     MCI.Sp    MCI.Se   MCI.Acc     MCI.C MCI.n      Loss
5 0.9428571 0.9162011 0.9293785 0.9295291   354 0.1206023
4 0.9470899 0.8631579 0.9050132 0.9274715   379 0.1520274
2 0.7173913 0.9358974 0.8275862 0.9053326   464 0.3305009
1 0.7336066 0.8938776 0.8139059 0.8980094   489 0.3619261

> # Same solution, but other layout of the results:
> ui.ordinal(ref, test, select.max=c('MCI.Sp+MCI.Se', 'MCI.C', 'MCI.Acc',
+                                    'MCI.Se', 'MCI.Sp', 'MCI.n'))
$Youden
max.Youden  threshold         sp         se        acc       loss          C 
 0.5988372  4.0000000  0.7500000  0.8488372  0.7992278  0.4011628  0.8887597 

$intersection
[1] 3

$candidates
              lowerbound upperbound     UI.Sp     UI.Se    UI.Acc  UI.ratio
MCI.Sp+MCI.Se          2          4 0.1647059 0.8607595 0.5000000 0.9366165
MCI.C                  2          4 0.1647059 0.8607595 0.5000000 0.9366165
MCI.Acc                2          4 0.1647059 0.8607595 0.5000000 0.9366165
MCI.Se                 2          3 0.4666667 0.5416667 0.5000000 0.8062016
MCI.Sp                 3          4 0.0000000 1.0000000 0.4892086 0.9651709
MCI.n                  3          3 0.0000000 1.0000000 0.4482759 0.8187984
                   UI.C UI.n    MCI.Sp    MCI.Se   MCI.Acc     MCI.C MCI.n
MCI.Sp+MCI.Se 0.5250186  164 0.9428571 0.9162011 0.9293785 0.9295291   354
MCI.C         0.5250186  164 0.9428571 0.9162011 0.9293785 0.9295291   354
MCI.Acc       0.5250186  164 0.9428571 0.9162011 0.9293785 0.9295291   354
MCI.Se        0.5041667   54 0.7173913 0.9358974 0.8275862 0.9053326   464
MCI.Sp        0.5170878  139 0.9470899 0.8631579 0.9050132 0.9274715   379
MCI.n         0.5000000   29 0.7336066 0.8938776 0.8139059 0.8980094   489
                   Loss
MCI.Sp+MCI.Se 0.1206023
MCI.C         0.1206023
MCI.Acc       0.1206023
MCI.Se        0.3305009
MCI.Sp        0.1520274
MCI.n         0.3619261

> # forcing the Youden threshold as intersection gives the same best result.
> # However, the estimates for ui.Se, ui.Sp and ui.Acc differ:
> ui.ordinal(ref, test, intersection='Youden', select.max='All')
$Youden
max.Youden  threshold         sp         se        acc       loss          C 
 0.5988372  4.0000000  0.7500000  0.8488372  0.7992278  0.4011628  0.8887597 

$intersection
[1] 4

$candidates
  lowerbound upperbound     UI.Sp     UI.Se    UI.Acc  UI.ratio      UI.C UI.n
3          2          4 0.3529412 0.6962025 0.5182927 0.9366165 0.5250186  164
2          3          4 0.2253521 0.8088235 0.5107914 0.9651709 0.5170878  139
1          4          4 0.0000000 1.0000000 0.5000000 1.0077519 0.5000000  110
     MCI.Sp    MCI.Se   MCI.Acc     MCI.C MCI.n      Loss
3 0.9428571 0.9162011 0.9293785 0.9295291   354 0.1206023
2 0.9470899 0.8631579 0.9050132 0.9274715   379 0.1520274
1 0.9512195 0.8078818 0.8799020 0.9217950   408 0.1912642

> 
> nobs=1000
> set.seed(6)
> Z0 <- rnorm(nobs, mean=0)
> b0=seq(-5, 8, length.out=31)
> f0=cut(Z0, breaks = b0, labels = c(1:30))
> x0=as.numeric(levels(f0))[f0]
> Z1 <- rnorm(nobs, mean=1, sd=1.5)
> f1=cut(Z1, breaks = b0, labels = c(1:30))
> x1=as.numeric(levels(f1))[f1]
> ref=c(rep(0,nobs), rep(1,nobs))
> test=c(x0,x1)
> plotMD(ref, test, model='ordinal') # looks like binormal
> # looks less binormal, but in fact it is a useful approximation:
> plotMD(ref, test, model='binormal')
> ui.ordinal(ref, test)
$Youden
max.Youden  threshold         sp         se        acc       loss          C 
  0.343000  14.000000   0.743000   0.600000   0.671500   0.657000   0.716542 

$intersection
[1] 14

$candidates
   lowerbound upperbound     UI.Sp     UI.Se    UI.Acc  UI.ratio      UI.C UI.n
14         13         15 0.4115854 0.6904762 0.5527108 1.0243902 0.5604992  664
2          13         14 0.5672269 0.5207373 0.5450549 0.9117647 0.5439821  455
13         14         15 0.0000000 1.0000000 0.5458824 1.2020725 0.5233049  425
1          14         14 0.0000000 1.0000000 0.5231481 1.0970874 0.5000000  216
      MCI.Sp    MCI.Se   MCI.Acc     MCI.C MCI.n  Loss
14 0.9047619 0.5542169 0.7305389 0.7390690  1336 0.430
2  0.7979003 0.6219668 0.7087379 0.7384706  1545 0.491
13 0.9206939 0.4791667 0.7053968 0.7256017  1575 0.503
1  0.8283166 0.5490417 0.6894619 0.7247037  1784 0.564

> ui.binormal(ref, test) # compare application of the bi-normal model
Warning in nlopt.ui(Se = Se, Sp = Sp, mu0 = m0, sd0 = sd0, mu1 = m1, sd1 = sd1,  :
  More than one point of intersection. Highest used.
$status
[1] 4

$message
[1] "NLOPT_XTOL_REACHED: Optimization stopped because xtol_rel or xtol_abs (above) was reached."

$intersection
[1] 14.05299

$results
exp.Sp.ui exp.Se.ui       mu0       sd0       mu1       sd1 
 0.550000  0.550000 11.985000  2.355488 14.344000  3.450735 

$solution
       L        U 
13.12803 15.16166 

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.72 0.41 4.81 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
