TP=(pnorm(x+SEM, m1,sd1)-pnorm(x-SEM, m1,sd1))
FP=(pnorm(x+SEM,m0,sd0)-pnorm(x-SEM,m0,sd0))
TP/(TP+FP)
}
ts2.sspv=sppv(x, m1=0, sd1=1, m2=2, sd2=2, SEM=sem)
# if m1 > m2 then ilr.plus else ilr.min
# range[2] > range[1]; x=-4; m1=0; sd1=1; m2=2; sd2=2; SEM=0.87
ilr = function(x, m0, sd0, m1, sd1, SEM) {
(pnorm(x+SEM, m1,sd1)-pnorm(x-SEM, m1,sd1))/
(pnorm(x+SEM,m0,sd0)-pnorm(x-SEM,m0,sd0))
}
ts2.sspv=sppv(x, m0=0, sd0=1, m0=2, sd0=2, SEM=sem)
ts2.sspv=sppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
plot(x, ts2.ilr, type='l', ylim=c(0,20), ylab='LR')
lines(x, 1/y, type='l', col='red')
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
lines(x, ts2.sppv, col='blue')
ts2.sspv=sppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
lines(x, ts2.sppv, col='blue')
ts2.sppv=sppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
lines(x, ts2.sppv, col='blue')
sem = SEM(.8, 1.87)
pretest.prob = .5
x=seq(-4,6, by=0.1) # xmin=.5-1; xmax=.5+1
ts2.ilr=ilr(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
ts2.sppv=sppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
# wilr = which(y < 0)
pretest.odds = pretest.prob/(1-pretest.prob)
posttest.odds = pretest.odds * ts2.ilr # posttest.odss = Inf
posttest.prob = ifelse (is.infinite(posttest.odds) & posttest.odds > 0, 1,
posttest.odds/(posttest.odds+1))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
ppv = function(x, m0, sd0, m1, sd1, SEM, prevalence) {
TP=prevalence*(pnorm(x+SEM, m1,sd1)-pnorm(x-SEM, m1,sd1))
FP=(1-prevalence)*(pnorm(x+SEM,m0,sd0)-pnorm(x-SEM,m0,sd0))
TP/(TP+FP)
}
ts2.ppv=ppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
ts2.ppv=ppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem, prevalence=.5)
lines(x, ts2.ppv, col='green')
SEM(.8, 1.87)
pretest.prob = .4
x=seq(-4,6, by=0.1) # xmin=.5-1; xmax=.5+1
ts2.ilr=ilr(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
ts2.sppv=sppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem)
ts2.ppv=ppv(x, m0=0, sd0=1, m1=2, sd1=2, SEM=sem, prevalence=.5)
# wilr = which(y < 0)
pretest.odds = pretest.prob/(1-pretest.prob)
posttest.odds = pretest.odds * ts2.ilr # posttest.odss = Inf
posttest.prob = ifelse (is.infinite(posttest.odds) & posttest.odds > 0, 1,
posttest.odds/(posttest.odds+1))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
norm=rnorm(1000,0,1)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=TRUE) # set clipping ogg
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# legend outside plot
set.seed(1) # just to get the same random numbers
par(xpd=FALSE) # this is usually the default
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2), bty='L')
# this legend gets clipped:
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# so turn off clipping:
par(xpd=TRUE)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# this legend gets clipped:
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=FALSE) # this is usually the default
# this legend gets clipped:
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2), xpd=F)
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
# par(xpd=TRUE) # set clipping off
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2), xpd=F)
par(xpd=FALSE) # this is usually the default
# par(xpd=TRUE) # set clipping off
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2), xpd=F)
par(xpd=TRUE)
# par(xpd=TRUE) # set clipping off
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2), xpd=F)
# legend outside plot
set.seed(1) # just to get the same random numbers
par(xpd=FALSE) # this is usually the default
plot(1:3, rnorm(3), pch = 1, lty = 1, type = "o", ylim=c(-2,2), bty='L')
# this legend gets clipped:
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# so turn off clipping:
par(xpd=TRUE)
legend(2.8,-1,c("group A", "group B"), pch = c(1,2), lty = c(1,2), xpd=F)
# par(xpd=TRUE) # set clipping off
legend(2.8,-3,c("group A", "group B"), pch = c(1,2), lty = c(1,2), xpd=F)
# par(xpd=TRUE) # set clipping off
legend(2.8,-3,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=TRUE)
# par(xpd=TRUE) # set clipping off
legend(2.8,-3,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
# par(xpd=TRUE) # set clipping off
legend(2.8,-3,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=F)
# par(xpd=F) # set clipping off
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=FALSE)
# par(xpd=FALSE) # set clipping off
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
par(xpd=FALSE)
# par(xpd=FALSE) # set clipping off
legend(2.8,0,c("group A", "group B"), pch = c(1,2), lty = c(1,2))
# par(xpd=FALSE) # set clipping off
legend("bottomleft", legend = c("apple", "orange", "tree"), inset=c(-0.15,0),
bty = "n", xpd=TRUE, mar(c(7,7,7,7)), cex = 1, pch = c(10, 15, 1))
par(xpd=TRUE)
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
# par(xpd=TRUE) # set clipping on
legend("bottomleft", legend = c("apple", "orange", "tree"), inset=c(-0.15,0),
bty = "n", xpd=TRUE, mar(c(7,7,7,7)), cex = 1, pch = c(10, 15, 1))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
# par(xpd=TRUE) # set clipping on
legend("bottomleft", legend = c("apple", "orange", "tree"), inset=c(-0.15,0),
bty = "n", xpd=TRUE, mar(c(7,7,7,7)), cex = 1, pch = c(10, 15, 1))
par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,7))
plot(pca$scores[, 1],
pca$scores[, 2],
main = "PCA",
xlab = "First component",
ylab = "Second component",
col = c("deeppink", "blue")[crabs[, 2]],
pch = c(1, 2)[crabs[, 1]])
library(MASS)
normalizedCrabs <- crabs[, c(4, 5, 7, 8)] / rowSums(crabs[, c(4, 5, 7, 8)])
pca <- princomp(normalizedCrabs)
par(xpd = T, mar = par()$mar + c(0,0,0,7))
plot(pca$scores[, 1],
pca$scores[, 2],
main = "PCA",
xlab = "First component",
ylab = "Second component",
col = c("deeppink", "blue")[crabs[, 2]],
pch = c(1, 2)[crabs[, 1]])
legend(0.03, 0.025,
c("Male", "Female"),
col = c("blue", "deeppink"),
cex = 0.8,
lwd = 1, lty = 1)
legend(0.03, 0.015,
c("Blue species", "Orange species"),
cex = 0.8,
pch = c(1,2))
par(mar=c(5, 4, 4, 2) + 0.1)
par()$mar
plot(pca$scores[, 1],
pca$scores[, 2],
main = "PCA",
xlab = "First component",
ylab = "Second component",
col = c("deeppink", "blue")[crabs[, 2]],
pch = c(1, 2)[crabs[, 1]])
par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,7))
par()$mar
legend(0.03, 0.025,
c("Male", "Female"),
col = c("blue", "deeppink"),
cex = 0.8,
lwd = 1, lty = 1)
legend(0.03, 0.015,
c("Blue species", "Orange species"),
cex = 0.8,
pch = c(1,2))
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,3))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
# par(xpd=TRUE) # set clipping on
legend(0.03, 0.015,
c("Blue species", "Orange species"),
cex = 0.8,
pch = c(1,2))
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,3))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(0.4, 7,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
par(xpd=NA, mar=tempmar)
par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,3))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(0.4, 7,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
legend(0.4, 5,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
legend(0.03, 0.015,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
legend(0.03, 0.02,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
legend(6, 0.02,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
legend(7, 0.02,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
par(xpd = T, mar = par()$mar + c(0,0,0,3))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
par(xpd=NA, mar=tempmar)
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "spps"),
cex = 0.8,
pch = c(1,2))
par(xpd=NA, mar=tempmar)
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "spps"),
cex = 0.8,
lty = c(1,2))
par(xpd=NA, mar=tempmar)
legend(7, 0.02,
c("ppv", "spps"),
cex = 0.8,
lty = c(1,1),
col=c(1,2))
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "spps"),
cex = 0.8,
lty = c(1,1),
col=c(1,2))
par(xpd=NA, mar=tempmar)
sppv
which(ts2.sppv > .667)
df <- as.data.frame(do.call(rbind,
lapply(r[lengths(r) > 1], range)));
r = which(ts2.sppv > .667)
df <- as.data.frame(do.call(rbind,
lapply(r[lengths(r) > 1], range)));
names(df) <- c("start","end")
r = which(ts2.sppv > .667)
runs = split(seq_along(r), cumsum(c(0, diff(data) > 1)))
rr = which(ts2.sppv > .667)
rr
runs = split(seq_along(rr), cumsum(c(0, diff(data) > 1)))
runs = split(seq_along(rr), cumsum(c(0, diff(rr) > 1)))
runs
lapply(runs[lengths(runs) > 1], range)
df <- as.data.frame(do.call(rbind,
lapply(runs[lengths(runs) > 1], range)));
names(df) <- c("start","end")
df
df$x.start = x[df$start]
df$x.end = x[df$end]
df
abline(v=c(df$start, df$end))
df$start
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
abline(h=pretest.prob)
abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "sppv"),
cex = 0.8,
lty = c(1,1),
col=c(1,2))
par(xpd=NA, mar=tempmar)
df
abline(v=c(df$x.start, df$x.end))
abline(v=c(df$x.start, df$x.end), h=0.667)
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
# abline(h=pretest.prob)
# abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "sppv"),
cex = 0.8,
lty = c(1,1),
col=c(1,2))
par(xpd=FALSE, mar=tempmar)
abline(v=c(df$x.start, df$x.end), h=0.667)
df
rr
df$x.start =rr[df$start]
df$x.end =rr[df$end]
df
df$x.start = x[rr[df$start]]
df$x.end = x[rr[df$end]]
df
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
# abline(h=pretest.prob)
# abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "sppv"),
cex = 0.8,
lty = c(1,1),
col=c(1,2))
par(xpd=FALSE, mar=tempmar)
abline(v=c(df$x.start, df$x.end), h=0.667)
abline(v=c(df$x.start, df$x.end), h=c(0.333,0.667))
rr = which(ts.spps > 1/3 & ts2.sppv < 2/3)
rr = which(ts.sppv > 1/3 & ts2.sppv < 2/3)
rr = which(ts2.sppv > 1/3 & ts2.sppv < 2/3)
runs = split(seq_along(rr), cumsum(c(0, diff(rr) > 1)))
df <- as.data.frame(do.call(rbind,
lapply(runs[lengths(runs) > 1], range)));
df
names(df) <- c("start","end")
df$x.start = x[rr[df$start]]
df$x.end = x[rr[df$end]]
df
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
# abline(h=pretest.prob)
# abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("ppv", "sppv"),
cex = 0.8,
lty = c(1,1),
col=c(1,2))
par(xpd=FALSE, mar=tempmar)
abline(v=c(df$x.start, df$x.end), h=c(0.333,0.667))
legend(7, 0.02,
c("pt.prob", "sppv"),
cex = 0.8,
lty = c(1,1),
col=c('red','green'))
tempmar = par()$mar
par(xpd = T, mar = par()$mar + c(0,0,0,2))
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1))
lines(x, dnorm(x,2,2), col='red')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
# abline(h=pretest.prob)
# abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("pt.prob", "sppv"),
cex = 0.8,
lty = c(1,1),
col=c('red','green'))
par(xpd=FALSE, mar=tempmar)
abline(v=c(df$x.start, df$x.end), h=c(1/3,2/3))
df
plot(x, dnorm(x,0,1), type='l', ylim=c(0,1), col='grey')
lines(x, dnorm(x,2,2), col='lightred')
lines(x, dnorm(x,2,2), col='salmon')
lines(x, posttest.prob, col='red')
par(xpd=FALSE)
# abline(h=pretest.prob)
# abline(v=is)
lines(x, ts2.sppv, col='blue')
lines(x, ts2.ppv, col='green')
par(xpd=TRUE) # set clipping on
legend(7, 0.02,
c("pt.prob", "sppv"),
cex = 0.8,
lty = c(1,1),
col=c('red','green'))
par(xpd=FALSE, mar=tempmar)
rr = which(ts2.sppv > 1/3 & ts2.sppv < 2/3)
runs = split(seq_along(rr), cumsum(c(0, diff(rr) > 1)))
df <- as.data.frame(do.call(rbind,
lapply(runs[lengths(runs) > 1], range)));
names(df) <- c("start","end")
df$x.start = x[rr[df$start]]
df$x.end = x[rr[df$end]]
df
abline(v=c(df$x.start, df$x.end), h=c(1/3,2/3))
setwd("J:/UU/#PUBLIKATIES/Uncertainty Area & classification errors/Likelihood Ratio")
setwd("J:/UU/Git UncertainInterval")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin64c.exe")
Sys.getenv("R_GSCMD")
