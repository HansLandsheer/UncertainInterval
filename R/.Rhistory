tab=as.matrix(table( df$test, df$ref))
(direction!='<')
direction = '>'
df=check.data(ref, test, model='ordinal')
if (is.null(prevalence)) prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
(direction!='<')
(direction=='<')
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
tab
thresholds
totpos=sum(tab[,2])                          # The total number of positives (one number)
totneg=sum(tab[,1])                          # The total number of negatives (one number)
rdf=data.frame(thresholds=thresholds, d0=tab[,'0'], d1=tab[,'1'],
row.names=1:nrow(tab))
rdf$tot=rowSums(tab)                             # Number of patients w/ each threshold result
rdf$TP=unname(rev(cumsum(rev(tab[,2]))))     # cumulative sum of true positives
rdf$FP=unname(rev(cumsum(rev(tab[,1]))))     # cumsum of false positives
# rdf$TN=unname(cumsum(tab[,1]))
rdf$TN=totneg-rdf$FP
rdf$FN=totpos-rdf$TP
rdf$tpr=rdf$TP/totpos          # Sensitivity (fraction true positives)
rdf$fpr=rdf$FP/totneg  # 1-rdf$FP/totneg         # 1 - specificity (false positives)
rdf$preodds=prevalence/(1-prevalence); # pretest odds
rdf$sp=1-rdf$fpr;
rdf$se=rdf$tpr;
rdf$neg.lr=(1-rdf$se)/rdf$sp; # negative likelihood ratio
rdf$pos.lr=rdf$se/(1-rdf$sp); # positive likelihood ratio
# By Bayes' rule : posttest(posterior)odds=likelihoodratio * pretest(prior)odds
rdf$negpostodds=rdf$neg.lr * rdf$preodds ; # negative post odds
rdf$pospostodds=rdf$pos.lr * rdf$preodds ; # positive post odds
rdf$negpostprob = ifelse (is.infinite(rdf$negpostodds),1,
rdf$negpostodds / (rdf$negpostodds+1)) # negative post probability
rdf$pospostprob = ifelse (is.infinite(rdf$pospostodds),1,
rdf$pospostodds / (rdf$pospostodds+1)) # positive post probability
rdf
roc_obj <- roc(ref, test)
str(roc_obj)
# determine points of intercept with criteria
# Find points where pospostprob is below negpost.crit.
below <- rdf$negpostprob <= criterion.values[1]+.Machine$double.eps ^ 0.5
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.neg <- which(diff(below) != 0)
if (direction != '<') intersect.points.neg = intersect.points.neg+1
rdf$negpostprob
intersect.points.neg
(direction != '<')
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.neg <- which(diff(below) != 0)
intersect.points.neg
# if (direction != '<') intersect.points.neg = intersect.points.neg+1
# Find points where pospostprob is above pospost.crit.
above <- rdf$pospostprob >= criterion.values[2]-.Machine$double.eps ^ 0.5
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.pos <- which(diff(above) != 0)
if (direction == '<') intersect.points.pos = intersect.points.pos+1
intersect.points.pos
rdf$pospostprob
ltpos=utpos=NA
if(length(intersect.points.neg)>0) ltpos = intersect.points.neg # always use last value
if(length(intersect.points.pos)>0) utpos = intersect.points.pos # always use first value
if(length(ltpos) > 1 | length(utpos) > 1) warning('Multiple thresholds found.')
list(table = rdf, thresholds = c(lt = as.numeric(rownames(tab))[ltpos], ut = as.numeric(rownames(tab))[utpos]
)
c(lt = as.numeric(rownames(tab))[ltpos], ut = as.numeric(rownames(tab))[utpos])
which(diff(above) != 0)
which(diff(above) != 0)+1
setwd("J:/UU/Git UncertainInterval/R")
testscores=14:30
nodef= round(c(0,0,0,0,0,0,1,1,2, 3, 5,20,26,32,21,4,4)/11 * 16.7)
def  = round(c(3,0,0,0,0,0,3,8,8,20,14,31,14,11, 8,0,0)/11 * 4.3)
sum(nodef)+
sum(def)
testscores
def
nodef
test = c(rep(testscores, nodef), rep(testscores, def))
ref = c(rep(0, sum(nodef)), rep(1, sum(def)))
testscores
nodef
def
sum(nodef)
sum(def)
test = c(rep(14:30, c(0,0,0,0,0,0,2,2,3,5,8,30,39,49,32,6,6)),
rep(14:30, c(1,0,0,0,0,0,1,3,3,8,5,12,5,4,3,0,0)))
ref = c(rep(0, 182), rep(1, 45))
table(ref, test)
# irondef data (by approximation)
tst0 = rep(20:30, c(1,1,2,2,7,28, 38, 46, 30, 6,6))
tst1 = rep(c(14, 20:28), c(1,1,3,3,7,5,11,5,4,3))
tst = c(tst0, tst1)
ref = c(rep(0, length(tst0)), rep(1, length(tst1)))
addmargins(table (ref, tst))
greyzone(ref, -tst, prevalence=.5, crit=c(.1, .7), ret=T)
ref
tst
addmargins(table(ref, test))
test = c(rep(14:30, c(0,0,0,0,0,0,2,2,3,5,8,30,39,49,32,6,6)),
rep(14:30, c(1,0,0,0,0,0,1,3,3,8,5,12,5,4,3,0,0)))
ref = c(rep(0, 182), rep(1, 45))
addmargins(table(ref, test))
direction = '<'
df=check.data(ref, test, model='ordinal')
if (is.null(prevalence)) prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
direction
direction = '>'
df=check.data(ref, test, model='ordinal')
if (is.null(prevalence)) prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
tab
thresholds
totpos=sum(tab[,2])                          # The total number of positives (one number)
totneg=sum(tab[,1])                          # The total number of negatives (one number)
totpos
totneg
prevalence = sum(df$ref==1)/length(df$ref)
prevalence
rdf=data.frame(thresholds=thresholds, d0=tab[,'0'], d1=tab[,'1'],
row.names=1:nrow(tab))
rdf$tot=rowSums(tab)                             # Number of patients w/ each threshold result
rdf$TP=unname(rev(cumsum(rev(tab[,2]))))     # cumulative sum of true positives
rdf$FP=unname(rev(cumsum(rev(tab[,1]))))     # cumsum of false positives
# rdf$TN=unname(cumsum(tab[,1]))
rdf$TN=totneg-rdf$FP
rdf$FN=totpos-rdf$TP
rdf$tpr=rdf$TP/totpos          # Sensitivity (fraction true positives)
rdf$fpr=rdf$FP/totneg  # 1-rdf$FP/totneg         # 1 - specificity (false positives)
rdf$preodds=prevalence/(1-prevalence); # pretest odds
rdf$sp=1-rdf$fpr;
rdf$se=rdf$tpr;
rdf$neg.lr=(1-rdf$se)/rdf$sp; # negative likelihood ratio
rdf$pos.lr=rdf$se/(1-rdf$sp); # positive likelihood ratio
# By Bayes' rule : posttest(posterior)odds=likelihoodratio * pretest(prior)odds
rdf$negpostodds=rdf$neg.lr * rdf$preodds ; # negative post odds
rdf$pospostodds=rdf$pos.lr * rdf$preodds ; # positive post odds
rdf$negpostprob = ifelse (is.infinite(rdf$negpostodds),1,
rdf$negpostodds / (rdf$negpostodds+1)) # negative post probability
rdf$pospostprob = ifelse (is.infinite(rdf$pospostodds),1,
rdf$pospostodds / (rdf$pospostodds+1)) # positive post probability
rdf
greyzone(ref, -tst, ret=T)
greyzone(ref, -test, ret=T)
unname(cumsum(tab[,1]))
df=check.data(ref, test, model='ordinal')
if (is.null(prevalence)) prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
# tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
totpos=sum(tab[,2])                          # The total number of positives (one number)
totneg=sum(tab[,1])                          # The total number of negatives (one number)
rdf=data.frame(thresholds=thresholds, d0=tab[,'0'], d1=tab[,'1'],
row.names=1:nrow(tab))
rdf$tot=rowSums(tab)                             # Number of patients w/ each threshold result
if (direction == '<'){
rdf$TP=unname(rev(cumsum(rev(tab[,2]))))     # cumulative sum of true positives
rdf$FP=unname(rev(cumsum(rev(tab[,1]))))     # cumsum of false positives
} else {
rdf$TP=unname(cumsum(tab[,2]))     # cumulative sum of true positives
rdf$FP=unname(cumsum(tab[,1]))     # cumsum of false positives
}
# rdf$TN=unname(cumsum(tab[,1]))
rdf$TN=totneg-rdf$FP
rdf$FN=totpos-rdf$TP
rdf$tpr=rdf$TP/totpos          # Sensitivity (fraction true positives)
rdf$fpr=rdf$FP/totneg  # 1-rdf$FP/totneg         # 1 - specificity (false positives)
rdf$preodds=prevalence/(1-prevalence); # pretest odds
rdf$sp=1-rdf$fpr;
rdf$se=rdf$tpr;
rdf$neg.lr=(1-rdf$se)/rdf$sp; # negative likelihood ratio
rdf$pos.lr=rdf$se/(1-rdf$sp); # positive likelihood ratio
# By Bayes' rule : posttest(posterior)odds=likelihoodratio * pretest(prior)odds
rdf$negpostodds=rdf$neg.lr * rdf$preodds ; # negative post odds
rdf$pospostodds=rdf$pos.lr * rdf$preodds ; # positive post odds
rdf$negpostprob = ifelse (is.infinite(rdf$negpostodds),1,
rdf$negpostodds / (rdf$negpostodds+1)) # negative post probability
rdf$pospostprob = ifelse (is.infinite(rdf$pospostodds),1,
rdf$pospostodds / (rdf$pospostodds+1)) # positive post probability
rdf
ref$pospostprob
prev
rdf$TP
rdf$tpr
rdf$pospostprob
(prevalence*rdf$TP)/(prevalence*rdf$TP+(1-prevalence)*rdf$FP)
rdf$pospostprob
(prevalence*rdf$tpr)/(prevalence*rdf$tpr+(1-prevalence)*(1-rdf$fnr)
)
(prevalence*rdf$tpr)/(prevalence*rdf$tpr+(1-prevalence)*(1-rdf$fnr))
prevalence
rdf$tpr
rdf$fnr
(prevalence*rdf$tpr)/(prevalence*rdf$tpr+(1-prevalence)*rdf$fpr))
(prevalence*rdf$tpr)/(prevalence*rdf$tpr+(1-prevalence)*rdf$fpr)
rdf$negpostprob
1-((1-prevalence)*(1-rdf$fpr)/(prevalence*(1-rdf$tpr)+(1-prevalence)*(1-rdf$fpr))
1-((1-prevalence)*(1-rdf$fpr))/(prevalence*(1-rdf$tpr)+(1-prevalence)*(1-rdf$fpr))
prevalence=.1
df=check.data(ref, test, model='ordinal')
if (is.null(prevalence)) prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
# tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
totpos=sum(tab[,2])                          # The total number of positives (one number)
totneg=sum(tab[,1])                          # The total number of negatives (one number)
rdf=data.frame(thresholds=thresholds, d0=tab[,'0'], d1=tab[,'1'],
row.names=1:nrow(tab))
rdf$tot=rowSums(tab)                             # Number of patients w/ each threshold result
if (direction == '<'){
rdf$TP=unname(rev(cumsum(rev(tab[,2]))))     # cumulative sum of true positives
rdf$FP=unname(rev(cumsum(rev(tab[,1]))))     # cumsum of false positives
} else {
rdf$TP=unname(cumsum(tab[,2]))     # cumulative sum of true positives
rdf$FP=unname(cumsum(tab[,1]))     # cumsum of false positives
}
# rdf$TN=unname(cumsum(tab[,1]))
rdf$TN=totneg-rdf$FP
rdf$FN=totpos-rdf$TP
rdf$tpr=rdf$TP/totpos          # Sensitivity (fraction true positives)
rdf$fpr=rdf$FP/totneg  # 1-rdf$FP/totneg         # 1 - specificity (false positives)
rdf$preodds=prevalence/(1-prevalence); # pretest odds
rdf$sp=1-rdf$fpr;
rdf$se=rdf$tpr;
rdf$neg.lr=(1-rdf$se)/rdf$sp; # negative likelihood ratio
rdf$pos.lr=rdf$se/(1-rdf$sp); # positive likelihood ratio
# By Bayes' rule : posttest(posterior)odds=likelihoodratio * pretest(prior)odds
rdf$negpostodds=rdf$neg.lr * rdf$preodds ; # negative post odds
rdf$pospostodds=rdf$pos.lr * rdf$preodds ; # positive post odds
rdf$negpostprob = ifelse (is.infinite(rdf$negpostodds),1,
rdf$negpostodds / (rdf$negpostodds+1)) # negative post probability
rdf$pospostprob = ifelse (is.infinite(rdf$pospostodds),1,
rdf$pospostodds / (rdf$pospostodds+1)) # positive post probability
rdf$pospostprob
(prevalence*rdf$tpr)/(prevalence*rdf$tpr+(1-prevalence)*rdf$fpr)
rdf$negpostprob
1-((1-prevalence)*(1-rdf$fpr))/(prevalence*(1-rdf$tpr)+(1-prevalence)*(1-rdf$fpr))
# determine points of intercept with criteria
# Find points where pospostprob is below negpost.crit.
below <- rdf$negpostprob <= criterion.values[1]+.Machine$double.eps ^ 0.5
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.neg <- which(diff(below) != 0)
intersect.points.neg
criterion.values
criterion.values[1]
rdf$negpostprob
# if (direction != '<') intersect.points.neg = intersect.points.neg+1
# Find points where pospostprob is above pospost.crit.
above <- rdf$pospostprob >= criterion.values[2]-.Machine$double.eps ^ 0.5
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.pos <- which(diff(above) != 0)+1
intersect.points.pos
rdf$pospostprob
barplotMD(ref, test)
test = c(rep(14:30, c(0,0,0,0,0,0,1,1,2,2,4,16,22,28,20,4,4)),
rep(14:30, c(2,0,0,0,0,0,2,8,8,18,14,27,12,4,3,0,0)))
ref = c(rep(0, 182), rep(1, 45))
barplotMD(ref, test)
sum(c(0,0,0,0,0,0,1,1,2,2,4,16,22,28,20,4,4))
sum(c(2,0,0,0,0,0,2,8,8,18,14,27,12,4,3,0,0)))
sum(c(2,0,0,0,0,0,2,8,8,18,14,27,12,4,3,0,0))
ref = c(rep(0, 104), rep(1, 98))
barplotMD(ref, test)
direction
df=check.data(ref, test, model='ordinal')
if (is.null(prevalence)) prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
# tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
totpos=sum(tab[,2])                          # The total number of positives (one number)
totneg=sum(tab[,1])                          # The total number of negatives (one number)
rdf=data.frame(thresholds=thresholds, d0=tab[,'0'], d1=tab[,'1'],
row.names=1:nrow(tab))
rdf$tot=rowSums(tab)                             # Number of patients w/ each threshold result
if (direction == '<'){
rdf$TP=unname(rev(cumsum(rev(tab[,2]))))     # cumulative sum of true positives
rdf$FP=unname(rev(cumsum(rev(tab[,1]))))     # cumsum of false positives
} else {
rdf$TP=unname(cumsum(tab[,2]))     # cumulative sum of true positives
rdf$FP=unname(cumsum(tab[,1]))     # cumsum of false positives
}
# rdf$TN=unname(cumsum(tab[,1]))
rdf$TN=totneg-rdf$FP
rdf$FN=totpos-rdf$TP
rdf$tpr=rdf$TP/totpos          # Sensitivity (fraction true positives)
rdf$fpr=rdf$FP/totneg  # 1-rdf$FP/totneg         # 1 - specificity (false positives)
rdf$preodds=prevalence/(1-prevalence); # pretest odds
rdf$sp=1-rdf$fpr;
rdf$se=rdf$tpr;
rdf$neg.lr=(1-rdf$se)/rdf$sp; # negative likelihood ratio
rdf$pos.lr=rdf$se/(1-rdf$sp); # positive likelihood ratio
# By Bayes' rule : posttest(posterior)odds=likelihoodratio * pretest(prior)odds
rdf$negpostodds=rdf$neg.lr * rdf$preodds ; # negative post odds
rdf$pospostodds=rdf$pos.lr * rdf$preodds ; # positive post odds
rdf$negpostprob = ifelse (is.infinite(rdf$negpostodds),1,
rdf$negpostodds / (rdf$negpostodds+1)) # negative post probability
rdf$pospostprob = ifelse (is.infinite(rdf$pospostodds),1,
rdf$pospostodds / (rdf$pospostodds+1)) # positive post probability
rdf$pospostprob
(prevalence*rdf$tpr)/(prevalence*rdf$tpr+(1-prevalence)*rdf$fpr)
prevalence
rdf$negpostprob
rdf
unname(cumsum(tab[,2]))
tab
direction
unname(cumsum(tab[,1])
)
rdf
which(diff(above) != 0)
direction
prevalence=NULL; criterion.values=c(.10, .90)
df=check.data(ref, test, model='ordinal')
if (is.null(prevalence)) prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
# tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
totpos=sum(tab[,2])                          # The total number of positives (one number)
totneg=sum(tab[,1])                          # The total number of negatives (one number)
rdf=data.frame(thresholds=thresholds, d0=tab[,'0'], d1=tab[,'1'],
row.names=1:nrow(tab))
rdf$tot=rowSums(tab)                             # Number of patients w/ each threshold result
if (direction == '<'){
rdf$TP=unname(rev(cumsum(rev(tab[,2]))))     # cumulative sum of true positives
rdf$FP=unname(rev(cumsum(rev(tab[,1]))))     # cumsum of false positives
} else {
rdf$TP=unname(cumsum(tab[,2]))     # cumulative sum of true positives
rdf$FP=unname(cumsum(tab[,1]))     # cumsum of false positives
}
rdf$TN=totneg-rdf$FP
rdf$FN=totpos-rdf$TP
rdf$tpr=rdf$TP/totpos          # Sensitivity (fraction true positives)
rdf$fpr=rdf$FP/totneg  # 1-rdf$FP/totneg         # 1 - specificity (false positives)
rdf$preodds=prevalence/(1-prevalence); # pretest odds
rdf$sp=1-rdf$fpr;
rdf$se=rdf$tpr;
rdf$neg.lr=(1-rdf$se)/rdf$sp; # negative likelihood ratio
rdf$pos.lr=rdf$se/(1-rdf$sp); # positive likelihood ratio
# By Bayes' rule : posttest(posterior)odds=likelihoodratio * pretest(prior)odds
rdf$negpostodds=rdf$neg.lr * rdf$preodds ; # negative post odds
rdf$pospostodds=rdf$pos.lr * rdf$preodds ; # positive post odds
rdf$negpostprob = ifelse (is.infinite(rdf$negpostodds),1,
rdf$negpostodds / (rdf$negpostodds+1)) # negative post probability
rdf$pospostprob = ifelse (is.infinite(rdf$pospostodds),1,
rdf$pospostodds / (rdf$pospostodds+1)) # positive post probability
rdf
# determine points of intercept with criteria
# Find points where pospostprob is below negpost.crit.
below <- rdf$negpostprob <= criterion.values[1]+.Machine$double.eps ^ 0.5
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.neg <- which(diff(below) != 0)
intersect.points.neg
(direction == '<')
criterion.values[1]
if (direction != '<') intersect.points.neg = intersect.points.neg+1
intersect.points.neg
# if (direction != '<') intersect.points.neg = intersect.points.neg+1
# Find points where pospostprob is above pospost.crit.
above <- rdf$pospostprob >= criterion.values[2]-.Machine$double.eps ^ 0.5
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.pos <- which(diff(above) != 0)
rdf$pospostprob
criterion.values[2]
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points.pos <- which(diff(above) != 0)
intersect.points.pos
(direction != '<')
if (direction == '<') intersect.points.pos = intersect.points.pos+1
direction
ltpos = names(tab)[intersect.points.neg]
ltpos
names(tab)
tab=as.matrix(table( df$test, df$ref))
tab
if(length(intersect.points.neg)>0) ltpos = intersect.points.neg # always use last value
if(length(intersect.points.pos)>0) utpos = intersect.points.pos # always use first value
intersect.points.neg
intersect.points.pos
as.numeric(rownames(tab))[ltpos]
as.numeric(rownames(tab))[utpos]
rdf$pospostprob
(prevalence*rdf$tpr)/(prevalence*rdf$tpr+(1-prevalence)*rdf$fpr)
prevalence
as.numeric(rownames(tab))[utpos]
as.numeric(rownames(tab))[ltpos]
# traditional academic point system for AUC
# .90-1 = excellent (A)
# .80-.90 = good (B)
# .70-.80 = fair (C)
# .60-.70 = poor (D)
# .50-.60 = fail (F)
# assumed is that test scores abnorm > test scores norm
emp.AUC <- function(norm, abnorm) {
o = outer(abnorm, norm, "-")
mean((o > 0) + .5 * (o == 0))
}
emp.AUC(test[ref==0],test[ref==1])
emp.AUC(-test[ref==0],-test[ref==1])
sum(c(1,0,0,0,0,0,1,4,4,9,7,13,6,3,2,0,0))
sun(c(0,0,0,0,0,0,3,3,5,7,10,30,40,50,24,10,10))
sum(c(0,0,0,0,0,0,3,3,5,7,10,30,40,50,24,10,10))
test = c(rep(14:30, c(0,0,0,0,0,0,3,3,5,7,10,30,40,50,24,10,10)),
rep(14:30, c(1,0,0,0,0,0,1,4,4,9,7,13,6,3,2,0,0)))
ref = c(rep(0, 192), rep(1, 50))
emp.AUC(-test[ref==0],-test[ref==1])
barplotMD(ref, test)
plotMD(ref, test)
sum(c(0,0,0,0,0,0,3,3,5,7,10,30,40,50,24,10,10))
sum(c(1,0,0,0,0,0,1,4,4,9, 6,13, 6, 5, 4, 0, 0)
)
test = c(rep(14:31, c(0,0,0,0,0,0,3,3,5,7,10,30,40,50,24,10,10)),
rep(14:31, c(1,0,0,0,0,0,1,4,4,9, 6,13, 6, 5, 4, 0, 0)))
sum(c(0,0,0,0,0,0,3,3,5,7,10,20,30,40,50,24,10,10))
sum(c(1,0,0,0,0,0,1,4,4,9, 6,13, 8, 6, 5, 4, 0, 0))
test = c(rep(14:31, c(0,0,0,0,0,0,3,3,5,7,10,20,30,40,50,24,10,10)),
rep(14:31, c(1,0,0,0,0,0,1,4,4,9, 6,13, 8, 6, 5, 4, 0, 0)))
ref = c(rep(0, 212), rep(1, 61))
barplotMD(ref, test)
plotMD(ref, test)
emp.AUC(-test[ref==0],-test[ref==1])
sum(c(0,0,0,0,0,0,3,3,5,7,10,20,30,40,50,24,10,10))
sum(c(1,0,0,0,0,0,1,4,4,9, 6,13, 8, 6, 5, 4, 0, 0))
barplotMD(ref, test)
test = c(rep(14:31, c(0,0,0,0,0,0,3,3,5,7,10,20,30,40,50,24,10,10)),
rep(14:31, c(1,0,0,0,0,0,1,4,4,9, 6,13, 8, 6, 5, 4, 0, 0)))
ref = c(rep(0, 212), rep(1, 61))
barplotMD(ref, test)
addmargins(table(ref, test))
df=check.data(ref, test, model='ordinal')
prevalence = sum(df$ref==1)/length(df$ref)
tab=as.matrix(table( df$test, df$ref))
if (direction=='<') {
thresholds=paste('>=',rownames(tab))
} else {
# tab = tab[nrow(tab):1,]
thresholds=paste('<=',rownames(tab))
}
totpos=sum(tab[,2])                          # The total number of positives (one number)
totneg=sum(tab[,1])                          # The total number of negatives (one number)
rdf=data.frame(thresholds=thresholds, d0=tab[,'0'], d1=tab[,'1'],
row.names=1:nrow(tab))
rdf$tot=rowSums(tab)                             # Number of patients w/ each threshold result
if (direction == '<'){
rdf$TP=unname(rev(cumsum(rev(tab[,2]))))     # cumulative sum of true positives
rdf$FP=unname(rev(cumsum(rev(tab[,1]))))     # cumsum of false positives
} else {
rdf$TP=unname(cumsum(tab[,2]))     # cumulative sum of true positives
rdf$FP=unname(cumsum(tab[,1]))     # cumsum of false positives
}
rdf$TN=totneg-rdf$FP
rdf$FN=totpos-rdf$TP
rdf$tpr=rdf$TP/totpos          # Sensitivity (fraction true positives)
rdf$fpr=rdf$FP/totneg  # 1-rdf$FP/totneg         # 1 - specificity (false positives)
rdf$preodds=prevalence/(1-prevalence); # pretest odds
rdf$sp=1-rdf$fpr;
rdf$se=rdf$tpr;
rdf$neg.lr=(1-rdf$se)/rdf$sp; # negative likelihood ratio
rdf$pos.lr=rdf$se/(1-rdf$sp); # positive likelihood ratio
# By Bayes' rule : posttest(posterior)odds=likelihoodratio * pretest(prior)odds
rdf$negpostodds=rdf$neg.lr * rdf$preodds ; # negative post odds
rdf$pospostodds=rdf$pos.lr * rdf$preodds ; # positive post odds
rdf$negpostprob = ifelse (is.infinite(rdf$negpostodds),1,
rdf$negpostodds / (rdf$negpostodds+1)) # negative post probability
rdf$pospostprob = ifelse (is.infinite(rdf$pospostodds),1,
rdf$pospostodds / (rdf$pospostodds+1)) # positive post probability
rdf
roc_obj <- roc(ref, test)
str(roc_obj)
str(roc_obj)$sensitivities
roc_obj$sensitivities
roc_obj$specitivities
roc_obj$specificities
plot(1-rdf$sp, rdf$se, ltype='l)
)
plot(1-rdf$sp, rdf$se, ltype='l)
1-rdf$sp
rdf$se
plot(1-rdf$sp, rdf$se, type='l)
)
;
